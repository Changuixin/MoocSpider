1220307902,软件按其工作方式划分为：实时处理软件、分时软件、（    ）和批处理软件。,B,"系统软件
交互式软件
支撑软件
应用软件
",1
1220304888,软件实现与通常的程序设计的主要区别是（    ）。,C,"代码格式标准
算法
软件的集成与测试
数据结构
",1
1220311096,软件测试也属于实现阶段的活动，可以分为对程序基本组成单元的测试（单元测试）对软件组装结果的测试（    ）、对整个软件系统的测试（系统测试），以及把软件交付给用户时的测试（验收测试）,B,"白盒测试
集成测试
黑盒测试
回归测试
",1
1220307906,软件维护分为4 种类型:改正性维护、（    ）、完善性维护、预防性维护。,D,"可理解性维护
测试性维护
兼容性维护
适应性维护
",1
1220298184,软件可维护性可通过三个质量特性来衡量：（    ）、可测试性、可修改性。,B,"可用性
可理解性
可读性
可移植性
",1
1220301058,瀑布式开发过程，也叫软件生存期模型。它按照软件生命周期，把开发分为制定计划、需求分析、软件设计、程序编写、（      ）和运行维护等6 个基本活动，并且规定了它们自上而下、相互衔接的固定次序，如同瀑布流水，逐级下落。,B,"项目经理评价
软件测试
用户评价
设计者评价
",1
1220295913,增量开发是指待开发的软件不是一次就完成的，而是把软件分成一系列（      ），完成一部分就交付一部分。,C,"函数
代码组
增量
模块
",1
1220315193,下列哪些模型不是迭代模型：（      ）,D,"进化式原型法
极限编程
Scrum
瀑布模型
",1
1220305898,软件构造的知识域分为5 个子域：软件构造基础，管理构造，实际考虑，（    ），软件构造工具。,C,"构造方法
需求构造
构造技术
测试构造
",1
1220301910,IDE 的特点是（    ）、可视化和自动化。,A,"集成化
简介化
多功能化
标准化
",1
1220306910,软件=（    ）+（    ）+（    ）。,BCD,"算法
数据
文档
程序
数据结构
",2
1220309512,软件按服务对象的范围划分为：（    ）,BC,"专业软件
项目软件
产品软件
民用软件
应用软件
",2
1220301917,从用户的角度，软件生存周期分为下列三个阶段:（      ）,ABD,"获取软件
提出需求
测试软件
使用软件
用户评价
",2
1220305910,敏捷开发4 个核心价值观:（    ）,ABDE,"工作的软件胜过详尽的文档
响应变化胜过遵循计划
用最快的速度开发以满足客户需求
客户合作胜过合同谈判
个体和互动胜过流程和工具
",2
1220294026,高级程序语言存在不同的分类。一种划分标准是按照语言的计算模型，将高级语言分为两个大类：（    ）,AD,"命令式
面向对象式
过程式
声明式
函数式
",2
1220298879,软件是由计算机程序和程序设计的概念发展演化过来的，是程序和程序设计发展到一定规模后并且在逐步商品化的过程中形成的。,B,"错误
正确
",4
1220309944,“软件=程序+数据”程序是软件的中枢和骨架。,A,"错误
正确
",4
1220298172,在计算机技术发展的早期，软件开发的主要活动就是算法研究。,A,"错误
正确
",4
1220309502,软件实现是完成可以运行程序及数据的软件开发过程。,A,"正确
错误
",4
1220302884,在软件生存周期中，软件维护会持续很长一段时间，甚至超过全周期的一半。,A,"正确
错误
",4
1220294000,功能需求定义软件在抽象级别应该提供的基本功能。,A,"正确
错误
",4
1220298174,软件测试不属于实现阶段的活动。,B,"正确
错误
",4
1220302885,Scrum 是一个用于开发和维持简单软件产品的框架，是一个增量的、迭代的开发过程。,B,"正确
错误
",4
1220298175,如何考虑构造，在某种程度上依赖于采用的生存周期模型。,B,"错误
正确
",4
1220305893,数据流语言的计算模型是原始函数节点上的信息元素（Tokens）流，它们到达节点后触发节点的计算。,B,"错误
正确
",4
1220298155,软件维护分为：改正性维护、适应性维护、完善性维护和__________。,,预防性,3
1220305886,在计算机技术发展的早期，软件开发的主要活动就是________。,,程序设计,3
1220307893,软件实现与通常的程序设计的主要区别是软件的________。,,集成与测试,3
1220291878,在瀑布模型中，软件开发的各项活动严格按照________方式进行。,,线性,3
1220293989,________是软件开发的中心活动。,,构造,3
1220311091,软件是能够完成预定功能和性能的可执行的程序和使程序正常执行所需要的数据，加上描述软件开发过程及其管理、程序的操作和使用的有关文档，即“软件=程序+数据+（    ）,C,"注释
算法
文档
第三方库
",1
1220309504,软件按服务对象的范围划分为：项目软件（定制开发）和（    ）（或通用软件）。,A,"产品软件
交互式软件
批处理软件
系统软件
",1
1220301907,软件设计是给出如何实现需求的决策和方案，是将系统功能分配到系统不同组成元素的过程，包括一组活动①划分需求②确定子系统③给子系统分配需求④定义子系统的功能⑤（    ）。,A,"定义子系统接口
测试子系统
划分子系统
维护子系统
",1
1220298886,软件集成指的是通过（    ）、消息传递、事件响应、状态改变、服务合成等机制把编程实现的各个软件单元组装在一起，形成一个更大的软件单元或可以运行的软件系统。,B,"标准化
函数调用
模块化
统一化
",1
1220309946,预防性维护是为改善软件系统的（    ），也为以后的改进奠定基础。,D,"可理解性
可移植性
可用性
可维护性和可靠性
",1
1220311100,敏捷开发是应对快速变化的需求的一种软件开发能力。它以（      ）为核心，采用迭代、循序渐进的方法进行软件开发。,B,"软件功能
用户的需求进化
代码质量
软件容错性
",1
1220301915,软件按其工作方式划分为：（       ）,ABDF,"分时软件
实时软件
并行软件
批处理软件
应用软件
交互式软件
",2
1220315907,瀑布式开发模型的主要问题：（      ）,ABD,"开发是线性的，只有等到整个过程的末期才能见到开发成果——可运行软件，不利于快速响应变化的需求。
阶段划分僵硬，每个阶段不能缺省，而且产生大量文档，增加了工作量。
由于各个部件是逐渐并入已有软件的，必须确保每次增加的部件不破坏已构造好的系统，这需要软件具备开放式的体系结构，否则系统将失去稳定的结构。
早期的错误要等到开发后期的测试阶段才能发现，可能带来严重的后果，增加了开发的风险。
逐步增加部件的方式，很容易退化为边做边改模型，从而使软件过程的控制失去整体性。
",2
1220299912,增量开发模型的优点:（      ）,ABDE,"有利于系统维护,当需求变更时，只变更部分部件，而不必影响整个系统。
用户有较充分的时间学习和适应新的产品。
可以使软件具有良好的稳定性和完整性。
可以使软件适应需求变化。
在短时间内向用户提交一个可运行软件，能够提供解决用户急用的一些功能。
",2
1220292924,软件按其功能划分为三种类型：系统软件、支撑软件和应用软件。,B,"错误
正确
",4
1220292925,从软件使用者的角度，把软件生存周期分为定义软件、开发软件和维护软件三个阶段。,B,"正确
错误
",4
1220301051,软件维护分为3 种类型。：改正性维护、适应性维护和完善性维护。,B,"正确
错误
",4
1220293999,瀑布式开发过程，也叫软件生存期模型。它规定自上而下、相互分离的固定次序。,A,"错误
正确
",4
1220303912,增量开发模型的基本思想是让开发者能够从早期的开发、系统的增量、交付的版本中学到经验。,B,"错误
正确
",4
1220313901,理想的软件项目在构造后要进行仔细的需求分析和架构设计。,B,"正确
错误
",4
1220303902,软件按其功能划分为三种类型：支撑软件、应用软件和________软件。,,系统,3
1220292905,图灵奖获得者沃斯（Niclaus Wirth）提出的“______________”是程序设计的精辟观点。,,程序=算法+数据结构,3
1220311875,________为适应环境的变化而进行的软件修改活动。,,适应性维护,3
1220306888,代码重构指的是改变________而不改变其行为，以便提高代码的可读性、易修改性等。,,程序结构,3
1220298881,计算机程序（简称程序）是为了解决某个特定问题而用程序设计语言描述的适合计算机处理的（    ）。,C,"函数
模块
语句序列
问题
",1
1220311092,软件按其功能划分为三种类型：（    ）、支撑软件和应用软件。,A,"系统软件
娱乐软件
音乐软件
批处理软件
",1
1220297296,从用户的角度，软件生存周期分为下列三个阶段:（    ）、获取软件、使用软件。,D,"测试软件
维护
设计软件
提出需求
",1
1220313170,从软件开发者的角度，一般把软件生存周期分为定义软件、开发软件和（    ）三个阶段。,A,"维护软件
详细设计
测试软件
总体设计
",1
1220311894,一个软件可能包含以下哪些特性：（      ）,BCEF,"快速响应性
交互性
分时特性
批处理特性
实时特性
批处理特性
",2
1220301924,软件维护分为4 种类型：（      ）,ABCD,"适应性维护
改正性维护
预防性维护
完善性维护
可用性维护
",2
1220302900,命令式语言可以细分为:（      ）,ABC,"冯·诺依曼式语言
脚本语言
面向对象语言
过程化语言
机器语言
",2
1220313900,敏捷开发是应对较慢速变化的需求的一种软件开发能力。,B,"正确
错误
",4
1220292926,敏捷开发遵循软件开发的基本原则，如抽象、模块内聚、模块之间松散耦合、信息隐藏等。,A,"正确
错误
",4
1220301042,从用户的角度，软件生存周期分为下列三个阶段：_________、获取软件和使用软件。,,需求,3
1220311080,面向对象软件构造（动词）是运用面向对象技术开发具有_________的软件系统。,,结构,3
1220301045,软件运行环境，广义上说，是一个软件运行所要求的各种条件，包括__________和硬件环境。,,软件,3
1220305897,PSP（Personal Software Process）能够说明个体软件过程的原则；帮助软件工程师做出准确的计划；确定软件工程师为改善产品质量要采取的步骤；（      ）；确定过程的改变对软件工程师能力的影响。,D,"确定工程师的编码风格
建立合理的软件评估方案
确定工程师软件测试步骤
建立度量个体软件过程改善的基准
",1
1220295918,命令式语言可以细分为冯·诺依曼式语言、脚本语言和（    ）。,D,"过程化设计语言
汇编语言
机器语言
面向对象语言
",1
1220305902,软件按其功能划分为三种类型：（        ）,ABD,"支撑软件
应用软件
实时软件
系统软件
娱乐软件
",2
1220309949,从软件开发者的角度，一般把软件生存周期分为下列三个阶段:（      ）,ADF,"定义软件
总体设计
需求分析
开发软件
维护软件
维护软件
",2
1220301902,计算机程序是为了解决广泛问题而用程序设计语言描述的适合计算机处理的语句序列。,B,"正确
错误
",4
1220301903,构造是软件开发的中心活动。,A,"正确
错误
",4
1220294888,________识别出独立或集体满足需求的子系统。,,确定子系统,3
1220299883,操作系统将计算机的硬件细节屏蔽，将计算机抽象成________。,,虚拟资源,3
1220306886,软件生存期模型也叫__________。,,瀑布,3
1220311081,软件开发是做出决策、________和选择的问题。,,权衡,3
1220305887,迭代周期的长度跟软件的开发________和规模有关系。,,周期,3
1220305899,除了功能的正确性，软件还要满足可靠性、可用性、（      ）、可维护性等质量属性。,A,"可移植性
可理解性
可重用性
可测试性
",1
1220308022,IDE 的特点是（    ）,ABC,"集成化
可视化
自动化
简洁化
多功能化
",2
1220298188,“软件构造”指的是通过（      ）、验证、单元测试、集成测试和调试的组合，详细地创建可工作的、有意义的软件。,B,"获取需求
编码
详细设计
总体设计
",1
1220302895,软件测试也属于实现阶段的活动，可以分为:（    ）,ABDF,"验收测试
单元测试
白盒测试
系统测试
黑盒测试
集成测试
",2
1220299882,迭代指的是不是一次性执行软件开发的全部活动，而是有计划地反复执行“______”这样一组过程。,,分析-设计-编码-测试,3
1220294002,软件的其他分类包括商业软件、（    ）、共享软件等。,D,"系统软件
应用软件
私人软件
开源软件
",1
1220295895,软件按其工作方式划分为：________分时软件、交互式软件和批处理软件。,,实时,3
1220301043,Scrum是一个用于开发和维持复杂软件的框架，是一个增量的、________的开发过程。,,迭代,3
1221763022,（  ）是对软件结构和行为的一个抽象描述。,C,"数据结构
操作集合
软件模型
E-R图
",1
1221751010,（）可以理解为实现MVC模式的一种技术方案。,A,"事件驱动编程
顺序编程
并发编程
表驱动编程
",1
1221772004,GUI的基本设计规范是界面合理、风格一致和()。,D,"美观大方
整洁划分
执行效率
元素标准
",1
1221797843,在GUI设计中，()是发生动作或状态改变的组件。,C,"控制器
事件
事件源
侦听器
",1
1221792849,在某些场合，使用()比使用文字更加简洁、更加容易辨析。,C,"图画
图像
图标
图形
",1
1221794832,（）是在GUI开发中广泛运用的编程范式。,C,"测试驱动编程
数据驱动编程
事件驱动编程
表驱动编程
",1
1221787839,在事件驱动编程的实现中有若干参与者，不包括（）。,D,"事件
事件源
侦听器
控制器
",1
1221798966,导致GUI测试困难的因素有很多，但是一般不包括()。,A,"测试用例复杂
程序流程不可预知
输入空间大
传统方法难以覆盖
",1
1221805959,(B)是对软件结构和行为的一个抽象描述。,D,"数据结构
设计模式
速成原型
软件模型
",1
1221814980,在构造任务9.1——具有GUI基本功能的口算练习软件中，在GUI中显示统计信息的组件是（）。,B,"JTextField  
JTextArea
JRadioButton
JLabel
",1
1221743374,导致GUI测试困难的因素有()。,ACD,"传统方法难以覆盖
测试用例复杂
程序流程不可预知
测试用例多
",2
1221774028,生成GUI测试用例的技术有（）。,ABD,"录制回放技术
基于FSM生成测试用例
基于数据流图生成测试用例
基于事件流图生成测试用例
",2
1221738565,GUI的基本元素分别是：()、图标和基本组件.,ABC,"工具条
菜单
窗口
容器
显示组件
",2
1221761968,Java GUI 设计模式主要有()。,BD,"工厂模式
观察者模式
代理模式
MVC模式
",2
1221824847,观察者模式及其实现中有若干参与者，包括（）。,ABDE,"侦听器
观察者接口
控制器
被观察者
观察者类
",2
1221755996,本章案例实践的构造任务9.2，对题目操作的“重新生成”、“清空”和“提交”功能，这三个方法都调用了刷新组件方法updateComponets。,A,"正确
错误
",4
1221753994,本章案例实践中，习题和答案的存储和读取不采用CVS文件操作，主要原因是CVS文件使用户容易阅读。,B,"正确
错误
",4
1221760002,文本区域的功能是获取用户输入的一行信息。,A,"错误
正确
",4
1221737021,GUI的设计原则之一是传递信息而不仅仅是数据。,A,"正确
错误
",4
1221745994,生成GUI测试用例的技术有录制回放技术、基于FSM生成测试用例以及基于事件流图生成测试用例。,A,"正确
错误
",4
1221748024,导致GUI测试困难的因素有程序流程不可预知、测试用例多以及传统方法难以覆盖。,A,"正确
错误
",4
1221744085,侦听器是获取键盘或鼠标输入的能力。,B,"正确
错误
",4
1221766349,有限状态自动机是一个具有离散输入/输出的数学模型，在任何时刻都能处于某个特定状态。,A,"正确
错误
",4
1221804956,GUI基本组件的复选框（JCheckBox）表现一组复选框之间的约束/依赖关系，必须独立选中至少一项。,B,"正确
错误
",4
1221807982,在案例的GUI实现中，我们没有在“提交答案”按钮的响应方法中直接写判题代码，而是将事件响应和答题判断分离，这导致代码隔离、不利于程序的阅读和维护。 ,A,"错误
正确
",4
1221737016,_______是一个具有离散输入/输出的数学模型，在任何时刻都能处于某个特定状态。,,有限状态自动机,3
1221766345,GUI 测试的困难主要有输入空间大，测试用例多、传统方法难以覆盖以及________不可预知。,,程序流程,3
1221738556,_____是获取键盘或鼠标输入的能力。,,焦点,3
1221737018,发生动作或状态改变的这个组件，就是______。,,事件源,3
1221759000,"在某些场合，使用______比使用文字更加简洁、更加容易辨析,这也是GUI界面流行的原因。",,图标,3
1221743379,Java GUI 设计模式主要有观察者模式和()。,B,"代理模式
MVC模式
适配器模式
工厂设计模式
",1
1221814846,在Java的Swing中，菜单包括( )、菜单和菜单项。,D,"下拉菜单
菜单组
菜单目录
菜单条
",1
1221807852,观察者模式的使用为设计GUI提供了一个方法，但是当GUI的复杂程度增加之后，观察者模式可能在一个类当中实现输入解析和业务逻辑两部分功能，这违背了（）的设计原则。,D,"接口隔离
开放封闭
里氏代换
单一职责
",1
1221805960,在构造任务9.1——具有GUI基本功能的口算练习软件中，在GUI中表示“算式”的组件是（）。,C,"JRadioButton
JLabel
JTextField
JTextArea
",1
1221764070,GUI的基本设计规范包括( )。,BCD,"整洁划分
元素标准
界面合理
风格一致
美观大方
",2
1221749114,Javax.swing包下的组件的作用是Swing 组件和实用工具。,B,"错误
正确
",4
1221750002,本章案例实践的构造任务9.2，updateComponets方法刷新界面，可以获取每道题的正确性并显示在界面上。,A,"正确
错误
",4
1221770974,软件模型是对软件结构和行为的一个具体详细的描述。,A,"错误
正确
",4
1221759004,标签用于提示信息，用户可以在界面上更改其提示信息。,B,"正确
错误
",4
1221763015,对于一组单选按钮，用户只能选择其中一项。,A,"正确
错误
",4
1221766351,在某些场合，使用伪代码比使用文字更加简洁、更加容易辨析。,A,"错误
正确
",4
1221766971,______是指当 GUI 程序（或网页）运行时，无须用户操作而首先获得焦点的那个组件。,,默认焦点,3
1221764061,在Swing 中，采用事件类表示某种事件，采用了_______来捕捉与处理事件。,,侦听器类,3
1221770973,用户对于组件的动作或组件状态的改变都可以列入_______。,,事件,3
1221755015,GUI的基本元素分别是：窗口与对话框、菜单和工具条、图标和________。,,基本组件,3
1221792847,具有有效、易用的（）是一款软件成功的必要条件。,C,"设计
注释格式
用户界面
功能
",1
1221819840,以下哪个组件的功能是获取用户输入的一行信息()?,A,"文本域
文本区域
密码域
标签
",1
1221807853,在观察者模式及其实现中有若干参与者，不包括（）。,D,"观察者类
观察者接口
侦听器
控制器
",1
1221778968,属于Swing常用的事件的是().,ABCDE,"窗口事件
动作事件
文本事件
焦点事件
键盘事件
",2
1221796970,测试GUI和测试普通程序不一样，为GUI生成测试用例的技术有（）。,BD,"基于用例图生成测试用例
基于FSM生成测试用例
基于数据流图生成测试用例
基于事件流图生成测试用例
基于程序框图生成测试用例
",2
1221775238,本章案例实践的构造任务9.2，要实现习题和答案的存储和读取功能、界面显示20道算式和判题结果，以及翻页刷新等，最好的策略是在第一个任务的基础上修改，而不是代码重构。,A,"错误
正确
",4
1221777994,Javax.swing包下的组件的作用是支持文档的显示和编辑。,B,"正确
错误
",4
1221818844,GUI开发中采用的观察者模式，一个被观察者只能有一个观察者监听。,A,"错误
正确
",4
1221751002,在观察者模式中被观察者可以将不同的观察者加入到对不同状态变化的__________列表中。,,侦听对象,3
1221821845,在观察者模式的实现中有若干参与者和动作，包括（）。,ABCE,"观察者
侦听器
更新状态
控制器
添加观察者
",2
1221756000,默认焦点是指当 GUI 程序（或网页）运行时，无须用户操作而首先获得焦点的那个组件。,A,"正确
错误
",4
1221810830,Java是与平台无关的程序设计语言，所以，用Java开发的GUI的显示效果与操作系统无关。 ,A,"错误
正确
",4
1221745988, Java GUI 设计模式主要有观察者模式和_______。,,MVC,3
1221739011,在 Swing 中，“窗口”是一种容器类，而且是_________容器类。,,顶层,3
1221737020,本章案例实践中，不在“提交答案”按钮的响应方法中直接写判题代码，主要原因是为了提高程序的阅读性和可维护性。,A,"正确
错误
",4
1221772996,本章案例实践要修改第3章中Exercise3_2_3类，因新增的方法用到Exercise3_2_3类的属性，无法派生，所以只能修改/重构。,B,"正确
错误
",4
1221740321,事件的处理可以采用匿名类、适配器类等多种方式。,B,"错误
正确
",4
1221772997,GUI基本元素的使用要符合窗口与对话框的标准。,A,"正确
错误
",4
1221763003,( )可以容纳其他容器或组件、本身可独立显示、不依赖其他容器类的类。,,顶层容器类,3
1221806988,在本章的求最大公约数和最小公倍数的程序中，我们没有将计算公约数和公倍数的代码写在响应方法中，而写在一个工具类当中，这符合面向对象设计思路和（）模式。,,MVC##%_YZPRLFH_%##模型-视图-控制,3
1221755011, ______是对软件结构和行为的一个抽象描述，比如UML和程序图。,,软件模型,3
1221757068,GUI 基本设计规范只需要要遵循界面合理，风格一致即可。,A,"错误
正确
",4
1221781469,GUI的基本设计规范是界面合理、_______和元素标准。,,风格一致,3
1221769059,（）是一个容器类，可以放置各种常用的工具或组件,,工具条,3
1220367533,模块具有三大特征：独立性、（）、通用性,A,"互换性
可理解性
可维护性
整洁性
",1
1220368430,图灵奖获得者 Wirth 提出的“（）的方法，可以简化为“算法+数据结构=程序”。,D,"过程化设计
面向数据流设计
面向对象设计
结构化程序设计
",1
1220362773,（）是计算机存储、组织数据的方式，是指相互之间存在一种或多种特定关系的数据元素的集合。,A,"数据结构
算法 
数据库
内存
",1
1220372262,一个函数中各个处理元素都密切相关于同一功能且必须顺序执行，前一功能元素的输出就是下一功能元素的输入，即一个函数完成多个功能，这些函数又必须顺序执行是下列哪种内聚（）,B,"时间内聚
顺序内聚
过程内聚
通信内聚
",1
1220366662,一组函数都访问同一（）而不是同一（），而且不是通过参数传递该全局变量的信息叫做外部耦合。,B,"全局数据结构 全局简单变量
全局简单变量 全局数据结构
公共数据环境 全局简单变量
全局数据结构 公共数据环境
",1
1220383236,一个函数直接修改另一个函数的数据，或直接转入另一个函数，或者一个函数有多个入口叫做（）,A,"内容耦合
非直接耦合
公共耦合
外部耦合
",1
1220374944,测试有助于提高程序质量。编写测试可以迫使程序员从不同的角度审视程序，使得程序设计易于调用、可测试、易修改、（）。,B,"简洁
易维护
易读
易理解
",1
1220351760,可维护可以细化为 5 个子特性，它们是（）、易改变性、稳定性、易测试性、维护性的依从性。,C,"易读性 
标准性
易分析性
可理解性 
",1
1220365294,命名标识符的首要原则是（）,D,"使用驼峰命名法或匈牙利命名法
简单
正确
要完全准确地表达所代表的事物或动作
",1
1220452077,由于不能穷尽测试程序，我们希望遵循软件测试的（）原则，即用尽量少的测试、最小的消耗能最大程度地保证程序的正确性，使程序满足需求。,D,"覆盖性
足够的
合理性
经济性
",1
1220367537,模块化是把问题分解成（）的子问题的一个重要手段，是实现控制复杂性的方式,ABC,"容易理解
便于实现
便于控制
足够小
便于测试
",2
1220376881,在程序系统的结构中，模块是（）的程序单元。,BDE,"可维护
可更换
可测试
可组合
可组合、可更换
可维护
可测试
可修改、可理解
可修改
",2
1220366668,模块具有三大特征：（）,ACD,"互换性
可理解性
通用性
独立性
可移植性
",2
1220376208,在模块设计中，最基本的是（）和（）的设计。,AC,"算法
代码结构
数据结构
功能
接口
",2
1220376882,在程序设计和软件开发的实践和理论中，存在过以（）为中心和以（）为中心的开发方法。,BD,"功能
操作
算法
数据
效率
",2
1220384096,下列属于7种内聚的是（）,ABC,"偶然内聚
过程内聚
逻辑内聚
物理内聚
数据内聚
",2
1220365297,下列内聚由强到弱排序正确的是（）,BCDE,"过程内聚 时间内聚 顺序内聚
顺序内聚 过程内聚 逻辑内聚
通信内聚 过程内聚 时间内聚
功能内聚 顺序内聚 时间内聚
功能内聚 时间内聚 偶然内聚
",2
1220366670,可维护可以细化为那些子特性（）,ABCDE,"维护性的依从性
易改变性
易分析性
易测试性
稳定性
",2
1220378035,软件质量是许多质量属性的综合体现，各种质量属性反映了软件质量的不同方面。从认识和评估的角度，软件质量分为（）,AB,"外部质量属性
内部质量属性
功能质量属性
代码质量属性
用户体验质量属性
",2
1220384100,内部质量属性是在软件设计和编码过程中，通过对中间产品的分析得来的。程序员更关心内部质量。内部质量特性包括（）,ABCDE,"可移植性
可扩展性
可复用性
易理解性、可测试性
可维护性
",2
1220374953,计算机算法与数据结构密切相关，但一种数据结构不可对应多种算法。,B,"正确
错误
",4
1220379869,根据 IEEE 标准的定义，测试用例是多组输入、运行条件和通过/失败准则。,A,"错误
正确
",4
1220385801,软件质量是许多质量属性的综合体现，各种质量属性反映了软件质量的不同方面。,A,"正确
错误
",4
1220383245,按限制规则划分，若处理每个合法输入的方式都不同，则为每个合法输入生成一个等价类。,A,"错误
正确
",4
1220444091,在程序设计中，如果每次分解得到的更小的问题，就可以运用递归方法（函数）来解决原问题。,A,"错误
正确
",4
1220453329,在程序设计中，数据结构的选择是一个举足轻重的设计考虑因素。,A,"正确
错误
",4
1220436088,优秀的数据结构决定了软件系统实现的困难程度和系统构造的质量。,A,"错误
正确
",4
1220438159,软件测试是使用人工或自动手段来运行或测定某个系统的过程，目的在于检测它是否满足规定的需求或者是否弄清预期结果与实际结果之间的差别。,B,"错误
正确
",4
1220440232,如果待测程序有错，而测试程序没有发现错误，称为测试误判。,B,"正确
错误
",4
1220450106,如果测试失败了，则说明待测程序一定存在错误。,A,"错误
正确
",4
1220372864,_______耦合是两函数之间没有直接关系，之间的联系完全是通过其他函数的控制和调用 来实现的。,,非直接,3
1220367797,计算机算法和数据结构的对应关系有：一种数据结构多种算法、多种数据结构和一种算法、________________和多种数据结构多种算法。,,一种数据结构一种算法,3
1220349625,课程中的算式是具有满足一定_________的组成元素和结构的数据，不是简单的符号串。,,约束条件,3
1220376216,若一组函数通过参数表传递记录信息，就是________。,,标记耦合,3
1220370410,程序中的每个功能可以由________来验证它的操作的正确性。,,测试,3
1220362771,（）是把问题分解成容易理解、便于控制、便于实现的子问题的一个重要手段，是实现控制复杂性的方式。,D,"面向对象
结构化
函数化
模块化
",1
1220437106,本案例中用数组表示算式的主要优势包括：节省存储空间、（）等。,A,"可以表示复杂的算式
易读
提高程序效率
有计算机语言的含义 
",1
1220445113,如果用数组存不同的算式作为“习题”，产生80道不同算式的习题时算式比较的次数是（）。,A,"3200
2400
800
3160
",1
1220440234,测试需求要求程序的预期结果和实际运行结果都要明确、合理、（）并可比较。,A,"可观察
正确
可记录
精确
",1
1220431119,用（）表示算式的主要劣势是要用转换函数才能显示并输出一个算式。,D,"数组
树
链表
结构体
",1
1220349618,Meyer 提出了下列哪几条标准来评价一种设计方法是否定义了有效的模块系统的能力。,ABCDE,"模块连续性
模块可理解性
模块可组装性
模块可分解性
模块保护性
",2
1220360794,列属于划分的七级耦合的是（）,ABD,"内容耦合
非直接耦合
直接耦合
外部耦合
内部耦合
",2
1220384097,下列按照耦合度从低到高排序正确的是（）,AD,"非直接耦合 控制耦合 外部耦合 内容耦合
标记耦合 控制耦合 内容耦合 公共耦合
内容耦合 公共耦合 外部耦合 非直接耦合
数据耦合 标记耦合 公共耦合 内容耦合
外部耦合 控制耦合 内容耦合 公共耦合
",2
1220383243,程序2.1或2.2明确清晰地定义了的“算式”、“习题”的含义。,B,"正确
错误
",4
1220343661,模块化是把问题分解成容易理解、便于控制、便于实现的子问题的一个重要手段，是实现控制复杂性的方式。,A,"正确
错误
",4
1220383244,软件模块是指具有相对不独立性的、由数据说明、执行语句等程序对象构成的代码集合。,A,"错误
正确
",4
1220376217,Meyer 提出了 4 条标准来评价一种设计方法是否定义了有效的模块系统的能力。,B,"正确
错误
",4
1220376218,在结构化程序设计中，函数之间的调用关系是反映模块耦合性的最重要因素。,B,"错误
正确
",4
1220371172,用户需求是从软件使用者的角度描述的对软件的要求。,A,"正确
错误
",4
1220438156,案例目前的设计，总体考虑，把算式用具有3个成员的数组表示是目前算式的最佳数据结构。,A,"错误
正确
",4
1220444093,用符号串表示算式的主要劣势是符号串内的符号没有计算机语言的含义（数据类型），需要解析。,A,"正确
错误
",4
1220439104,由于测试数据或预期结果的错误而导致根据测试程序显示待测程序可能有误，称为测试漏判。,A,"错误
正确
",4
1220349623,数据结构是计算机存储、组织数据的方式，是指相互之间存在一种或多种特定关系的________的集合。,,数据元素,3
1220371170,数组是有限个______元素的有序集合。,,同类型,3
1220349626,程序可维护细分的________提供辅助手段帮助分析识别缺陷的原因，找出待修复部分的能力。 ,,易分析性,3
1220383803,下列耦合度最强的是（）,A,"内容耦合
数据耦合
外部耦合
公共耦合
",1
1220379206,一组函数都访问同一个（）叫做公共耦合。,A,"公共数据环境
内存地址
全局简单变量
通信区
",1
1220362775,若一组函数通过参数表传递记录信息，就是（）,A,"标记耦合
外部耦合
非直接耦合
控制耦合
",1
1220435307,如果用数组存不同的算式作为“习题”，产生60道不同算式的习题时算式比较的次数是（）。,D,"1200
120
60
1770
",1
1220431120,通过信息()可以减少应用程序对硬件、操作系统的依赖关系。,D,"模块化
依赖
外显
隐蔽
",1
1220357511,ISO 为程序质量定义了下列哪几个独立的质量特性（）,ABCDE,"效率
可靠性
可用性
可维护性
功能性 
",2
1220436087,等价类划分有两种不同的情况：有效等价类和无效等价类。,B,"错误
正确
",4
1220435305,提高软件的模块化能够提高软件的可修改性。,A,"正确
错误
",4
1220440229,案例数据结构的设计，用结构体表示算式的主要优势是直接显示了人易读的形式，而且明确表示出算式组成的数据类型。,B,"正确
错误
",4
1220433338,满足了一个测试覆盖就能为软件的正确程度提供充足的保证。,A,"错误
正确
",4
1220372863,________是把问题分解成容易理解、便于控制、便于实现的子问题的一个重要手段，是实现控制复杂性的方式。,,模块化,3
1220357516,________是对一个模块内部各个组成元素之间相互结合的紧密程度的度量指标。,,内聚性,3
1220382800,模块化是现代软件开发技术的一个基本原则。（）是实现软件模块化的一个基本手段。,D,"库
文件
代码组
函数
",1
1220383801,在模块设计中，最基本的是算法和（）的设计。,D,"接口
代码结构
功能
数据结构
",1
1220432119,"对本案例，假设算式有3种数据结构：结构体、一维数组和字符串；习题有4种,则案例程序可以有（）种数据结构的组合方式。",D,"3
7
4
12
",1
1220439105,基于边界值分析设计测试用例，若输入条件指定为以a和b为边界的范围，则测试数据应该包括a、b，略大于a和（）的值作为合法的测试数据。,B,"中间
略小于b
略大于b
略小于a
",1
1220433339,理想的内聚性要求模块的功能应明确、（）。,A,"单一
全面
高级
清晰
",1
1220379209,模块的独立程度可以由两个定性标准来度量——（）。,BD,"功能个数
耦合
复杂性
内聚
接口个数
",2
1220367799,单纯的阅读程序代码无法确定程序是否正确。,A,"正确
错误
",4
1220381187,通信内聚指一个函数中各个处理元素都密切相关于同一功能且必须顺序执行。,A,"错误
正确
",4
1220378041,公共耦合是一组函数都访问同一个公共数据环境。,A,"正确
错误
",4
1220455116,通过分解，人们把一个大的、错综复杂的问题划分成一个相对简单、独立的问题，运用合适的方法分别解决。,A,"错误
正确
",4
1220453330,分析案例的要求，运算数的产生与其约束条件关系密切、不可分离。,B,"正确
错误
",4
1220443103,基于等价类划分测试的基本思想是：将程序可能的输入数据依据某个准则分成若干等价子集，其和覆盖了整个程序即可。,A,"错误
正确
",4
1220376214,________把几种相关的功能或数据组合在一起，每次被调用时，由传送函数参数来确定该函数应完成哪种功能。,,逻辑内聚,3
1220374949,模块具有独立性、________和通用性三大特性。,,互换性,3
1220351766,模块的独立程度可以由两个定性标准来度量----内聚和_______。,,耦合,3
1220372869,________是根据程序的出错情况，分析、猜测可能出现错误的程序区域，让程序运行，观察程序的变化来发现错误的根源。,,调试,3
1220360790,（）是面向方面的程序设计的核心概念。,C,"确定编程方向
难点分离
关注点分离
多个问题分离
",1
1220369142,下列内聚最强的是（）,D,"顺序内聚
过程内聚
通信内聚
功能内聚
",1
1220349614,下列耦合度最低的是（）,C,"外部耦合
控制耦合
非直接耦合
数据耦合
",1
1220365293,下列耦合度由强到弱排序正确的是（）。,C,"外部耦合 内部耦合 直接耦合 非直接耦合
内部耦合 外部耦合 非直接耦合 直接耦合
内容耦合 外部耦合 控制耦合 非直接耦合
标记耦合 控制耦合 外部耦合 公共耦合
",1
1220372272,关注点聚合是面向方面的程序设计的核心概念。,A,"正确
错误
",4
1220349627,函数是实现软件模块化的一个基本手段。,B,"错误
正确
",4
1220356624,命名标识符的首要原则是要完全准确地表达所代表的事物或动作。,B,"错误
正确
",4
1220441114,描述算法的方式可以采用自然语言或程序设计语言，但是不可以混合使用这两种语言。,B,"正确
错误
",4
1220438157,根据案例，包含算式的习题只能选择数组这个数据结构。,B,"正确
错误
",4
1220367795,软件模块是指具有________的、由数据说明、执行语句等程序对象构成的代码集合。,,相对独立性,3
1220379353,用户需求是从________的角度描述的对软件的要求。,,软件使用者,3
1220364772,模块的内聚性和________是两个相互对立且又密切相关的概念。,,耦合性,3
1220374943,下列四种内聚，由弱到强排序正确的是（）,B,"逻辑内聚 偶然内聚 时间内聚 过程内聚
偶然内聚 逻辑内聚 时间内聚 过程内聚
偶然内聚 逻辑内聚 过程内聚 时间内聚
逻辑内聚 偶然内聚 过程内聚 时间内聚
",1
1220361644,ISO 为程序质量定义了 6 个独立的质量特性，它们是：①功能性②可靠性③（）④效率⑤可维护性⑥可移植性,B,"可读性
可用性
简洁性
可测试性
",1
1220360795,面对一个较大问题不能或不知如何直接解决的时候，人们通常采用分而治之的策略。,A,"正确
错误
",4
1220369156,调试的基本活动包括隔离、定位和更正错误。,A,"正确
错误
",4
1220447374,软件测试是说明程序是否正确的唯一技术手段。,A,"错误
正确
",4
1220453328, 模块化使软件容易测试和调试，其中一个原因是程序的错误通常局限在有关的模块及它们之间的接口。,B,"错误
正确
",4
1220357508,一个函数通过传递开关、标志、名字等控制信息，明显地控制和选择另一函数的功能叫做（）,A,"控制耦合
外部耦合
标记耦合
内容耦合
",1
1220372263,代码的（）是区别代码好坏的一个关键特性。,B,"长度
编排
复杂程度
缩进
",1
1220447375,一个结构类型的数据结构是否包含非独立变量，主要考虑下列因素。①获取其值的难易程度。②（）,A,"使用它的频繁程度 
是否有副作用 
计算过程复杂
它是否是原子结构
",1
1220447377, 测试用例是一组输入、（）和通过/失败准则。,D,"测试数据
测试步骤
运行结果
运行条件
",1
1220365304,内聚性是对一个模块内部各个组成元素之间相互结合的紧密程度的度量指标。,A,"正确
错误
",4
1220356616,对于一个实际应用问题，需要采用模块化技术，分解大的数据、分解大的操作，使用若干 数据结构、若干算法来完成整个程序的功能。,B,"错误
正确
",4
1220438155,结构化程序设计方法具有“自顶向下”、“逐步求精”、从具体到抽象的特点。,B,"正确
错误
",4
1220362783,________是实现软件模块化的一个基本手段。,,"函数,过程，类",3
1220343660,________是一个模块与系统内其他模块及外部世界的关联程度的度量。,,耦合性,3
1220351765,在程序设计中，如果每次分解得到的更小的问题及其解答相似，就可以用________（函数）来解决问题。,,递归,3
1220379203,分解的核心是（）。,C,"将分解的若干小问题最终合并
将问题分解的尽可能小
将多个问题、难点或关注点分离
将问题分解的足够简单解决
",1
1220443104,在程序设计和软件开发的实践和理论中，存在过以（）为中心和以操作为中心的开发方法。 ,C,"组织
构架
数据
文件
",1
1220450107,()是两函数之间没有直接关系，之间的联系完全是通过其他函数的控制和调用来实现的。,D,"控制耦合
外部耦合
标记耦合
非直接耦合
",1
1221819881,软件复用的优点很多，但是不包括（ ）,B,"支持快速原型
减少操作性
减少维护代价
提高生产率
",1
1221786884,对设计模式具有的优势阐述不正确的是（）。,C,"在软件开发中提供了一种公共的词汇和理解
有助于管理软件的复杂度
有助于建立一个复杂和同构的软件结构
是软件设计建立文档的一种手段
",1
1221800882,下列不属于软件复用的优点的是（）。,B,"提高互操作性
提高运行效率
减少维护代价
提高生产率
",1
1221794875,软构件要达到一定的（ ），才能支持有效的复用，而建立软构件库要有很高的投入和长期的积累。,A,"数量
时间
规模
质量
",1
1221796884,在软件复用中，产生可复用构件的软件资产的过程称为（）。,B,"复用工程
领域工程
应用工程
软件工程
",1
1221797894,使用可复用构件的软件资产生产新系统的过程称为（）。,A,"应用工程
复用工程
领域工程
软件工程
",1
1221800887,框架是整个或部分系统的可复用设计，表现为一组（）间交互的方法。,B,"构件实例
抽象构件及构件实例
抽象构件
设计构件
",1
1221804876,根据你的理解，下面哪一个描述最不适合JFreeChart（）。,D,"框架
APIs
程序库
设计模式
",1
1221790999,在软件复用中，()是整个或部分系统的可复用设计，表现为一组抽象构件及构件实例间交互的方法。,B,"程序库
软件框架
设计模式
软件包
",1
1221810002,基础设施框架对系统基础功能的接近完整的实现，留有扩展余地。整合各种应用程序和服务的基础设施框架“企业服务总线”ESB为应用软件提供了若干核心功能，但是不包括（）。,D,"数据传输
协议转化
消息路由
数据融合
",1
1221809901,根据软件的层次结构，可将软件框架分为以下几种（）。,BCD,"业务框架
基础设施框架
中间件框架
应用框架
技术框架
",2
1221819915,产品复用是指复用已有的软构件，通过构件集成（组装）得到新系统。可复用的软件制品包括（）。,ABCD,"测试数据
代码
设计
需求规格
算法
",2
1221806919,在软件开发过程中使用可复用构件是一个知识密集的活动，包括（）复用构件。,ABCE,"获取
搜索
适应
设计
解释
",2
1221788991,设计模式具有突出的优势，包括（）。,ABDE,"有助于管理软件的复杂度
是软件设计建立文档的一种手段
能提高了软件运行速度
支持使用软件的功能属性和质量属性来构造软件
在软件开发中提供了一种公共的词汇和理解
",2
1221786258,一个大的应用系统可能由多层互相协作的框架组成，可能包含（），以及与应用系统相关的功能扩展。,ADE,"2个其它框架
3个其它框架
程序包
相关的构件类
1个其它框架
",2
1221790882,设计不可执行，不能用其功能特性检索。,A,"正确
错误
",4
1221828871,程序库可以是语言系统内置的，不能是第三方独立开发的。,A,"错误
正确
",4
1221783893,程序库是指具有特定的功能，用来完成特定任务的一个程序或一组程序。,A,"错误
正确
",4
1221801886,工厂方法模式中，抽象产品是所创建的所有对象的子类，它负责描述所有实例所共有的公共接口。,A,"错误
正确
",4
1221824889,与传统的基于类库的面向对象复用技术比较，应用框架更注重于面向非专业领域的软件复用。,B,"错误
正确
",4
1221825891,应用工程是领域工程的基础，它的目标是建立可复用的软构件库。,B,"正确
错误
",4
1221806904,使用第三方开发的程序库与使用系统本身的程序库，本质上区别显著。,B,"正确
错误
",4
1221802927,需求规格是提取用户需求、用某种符号记录用户需求的结果。它比设计还要抽象，受到设计技术和实现的约束条件更少，也更难易复用。,B,"正确
错误
",4
1221789000,通过课程中工厂方法模式的各种实现可以看出，工厂方法模式只能采用多态的技术手段实现。,B,"正确
错误
",4
1221790003,可复用的软件体系结构可以通过集成其他软件体系结构，建立新的更高层次的体系结构。,A,"正确
错误
",4
1221800874,想使用一个已经存在的类，而它的接口不符合目前的需求时，可以使用_____模式。,,适配器,3
1221811880,___是整个或部分系统的可复用设计，表现为一组抽象构件及构件实例间交互的方法，为构件复用提供了上下文关系。,,框架,3
1221807976,______是工厂方法模式的核心，它负责实现创建所有实例的内部逻辑。,,工厂,3
1221795397,JFreeChart的折线图的产生方式和柱状图类似，需把ChartFactory.createBarChart换成ChartFactory.createLineChart。可以看出JFreeChart在此使用了（）的设计模式。,,工厂方法,3
1221792013,技术框架致力于解决某一技术领域内的通用技术问题，并提供定制和扩展机制，例如，Hibernate解决了面向对象与关系数据库（）问题。,,映射,3
1221812865,"（ ）是软件复用最基本、最普通的形式,是一些经常使用、经过检验的规范化程序或子程序的集合。",B,"程序包
程序库
软件包
数据库
",1
1221787876,实现工厂模式时返回对象可以是抽象对象，也可以是（ ）。,C,"设计对象
代理对象
具体对象
操作对象
",1
1221783888,"框架的开发运用了复用技术,它从( )三个层面复用了软件。 ",C,"需求、代码、分析
代码、设计、测试
代码、设计、分析
测试、需求、分析
",1
1221788302,（）是指具有特定的功能，用来完成特定任务的一个程序或一组程序。,A,"程序包
程序库
软件包
类库
",1
1221812968,FreeMarker是一个用Java语言编写的模板引擎，它基于模板来生成文本输出，特别采用了（）的设计模式实际生成HTML的Web页面。,B,"观察者
 MVC
工厂方法
适配器
",1
1221784906,基本的设计模式分为（ ）三种。,ABD,"结构型模式
行为型模式
操作型模式
创建型模式
数据型模式
",2
1221789911,在JDK中使用工厂方法设计模式的例子包括（）。,ABCD,"java.lang.Object 中的方法toString()
java.lang.Class 中的方法 forName()
返回工厂创建的对象的方法valueOf()
java.lang.Class 中的方法 newInstance()
",2
1221815908,一般的高级程序设计语言都有内置的程序库，不同语言引用程序库的形式略有不同、关键字也不同，常见的有（）。,ACDE,"include
input
with
import
using
",2
1221811894,产品复用指复用已有的软构件，通过构件集成得到新系统。,A,"正确
错误
",4
1221794882,设计模式是经过时间检验的经验总结，是最基本、最常用的可复用件。,B,"错误
正确
",4
1221792888,应用框架不是包含构件应用程序的小片程序，而是实现了某应用领域通用完备功能的底层服务。,A,"正确
错误
",4
1221818882,框架允许使用快速原型技术，不大量使用复用代码。,A,"错误
正确
",4
1221783894,当模式作为设计活动的一部分时，简单地将执行部分累加起来，便能获得好的软件设计。,A,"错误
正确
",4
1221800891,应用基于模式的设计可以给软件带来好处：提高可预测性、减少风险、提高软件运行效率。,A,"错误
正确
",4
1221820109,JFreeChart是一组功能强大、灵活易用的 Java绘图 程序包。,A,"错误
正确
",4
1221827007,一般而言，软件包可当作复用件而在软件开发中使用、并且集成到开发的软件中。,A,"错误
正确
",4
1221795420,设计模式作为设计活动的一部分时，不用考虑环境，简单地把执行部分累加起来，就能获得好的软件设计。,A,"错误
正确
",4
1221813873,可复用软构件的开发或面向复用的软件开发，是产生软件资产的过程，称为______。,,领域工程,3
1221822881,_____是经过时间检验的经验总结，是最基本、最常用的可复用件。,,设计模式,3
1221791982,______是工厂模式的创建目标，所有创建的对象都是充当这个角色的某个具体类的实例。,,具体产品,3
1221811883,（）是经过时间检验的经验总结，是最基本、最常用的可复用件。,B,"数据模式
设计模式
体系结构
逻辑模式
",1
1221811884,基本的设计模式分为创建型模式、结构型模式（ ）三种。 ,B,"数据型模式
行为型模式
操作型模式
工厂模式
",1
1221816989,基于软构件的应用系统构造（集成和组装）或基于复用的软件开发，是使用软件资产生产新系统的过程，也称为（）。,A,"应用工程
软件工程
设计工程
软件工程
",1
1221807904,面向对象语言的类库，实质是一个综合性的面向对象的可重用类型集合，包括( )。,BCD,"基类
具体类
接口
抽象类
对象
",2
1221826898,工厂方法模式的结构包括：（）。,BCD,"工厂类
抽象产品
工厂
具体产品
基类
",2
1221811897,为实现更好复用的目的，共同的东西不应该总是抽象出来的。,A,"错误
正确
",4
1221797899,设计模式不是独立的实体，表示在低抽象层的设计模式会影响在较高抽象层的其他模式的应用方式。,A,"错误
正确
",4
1221790885,复用已有的软件开发过程，使用可复用的应用生成器来自动或半自动地生成所需系统，是软件复用。,A,"错误
正确
",4
1221795980,FreeMarker是一个Web应用框架，也适合作为Web应用框架的构件。,A,"错误
正确
",4
1221785000,适配器模式中的适配就是由“目标”到“源”，在当中连接两者的关系就是适配器。,B,"正确
错误
",4
1221795401,软件包由一个基本配置和若干可选部件构成，既可以是源代码形式，也可以是目标码形式。 ,A,"正确
错误
",4
1221801968,工厂方法模式中的抽象产品（Product）是所创建的所有对象的_____，它负责描述所有实例所共有的公共接口。,,父类##%_YZPRLFH_%##基类,3
1221797886,一段可执行代码的本质是它具有的（ ）功能。,A,"计算
检索
询问
测试
",1
1221786883,面向对象语言的（）实质是一个综合性的面向对象的可重用类型集合，包括接口、抽象类和具体类。,C,"软件包
程序库
类库
数据库
",1
1221816906,应用框架强调的是软件的设计复用性和（）。,D,"系统的可理解性
结构的复用性
系统的兼容性
系统可扩充性
",1
1221813890,软构件理解意味着三个因素：理解它的（）以及理解如何修改它使其以一种不同方式完成。,CD,"工作流程
组织结构
基本功能
工作方式
编程语言
",2
1221824906,需求规格是提取用户需求、用某种符号记录用户需求的结果，可以用下列（）方式描述。,ABCDE,"公理系统
自然语言
一阶逻辑
形式化语言
它们的混合式
",2
1221789001,JFreeChart是一组功能强大、灵活易用的绘图软件，输出的类型包括（）。,ABCE,"JPEG
PDF
Swing组件
docx
PNG
",2
1221790887,需求模型只是用抽象的方式暗示了设计，但并不能明确表示设计。,A,"正确
错误
",4
1221783886,代码复用是最基本、最普通的软件复用形式，包括______和源代码。,,可执行代码##%_YZPRLFH_%##运行码,3
1221813900,_____是指在两次或多次不同的软件开发过程中重复使用相同或相近的软件或软件模块的过程。,,软件复用,3
1221799863,软件复用可以分为_产品复用和_____复用两种。,,过程,3
1221811982,JFreeChart是一组功能强大、灵活易用的绘图软件，目前的版本可生成（）等多种图表。,ABCE,"柱状图
时序图
甘特图
热力图
饼图
",2
1221803984,工厂方法模式普遍使用于各种框架中，如（）。,ABCDE,"Apache
Spring
JDBC
JFreeChart
Struts
",2
1221814899,设计结果比代码更加抽象，它们的复用受实现环境因素影响较多，因而获得了更少的复用机会。,B,"正确
错误
",4
1221807898,程序库通常是编译后的二进制可执行码或虚拟机可执行码。,B,"错误
正确
",4
1221825889,工厂（Factory）是工厂方法模式的核心，它负责实现创建所有实例的内部逻辑。,A,"正确
错误
",4
1221795884,设计文件是设计决策的通用表示，其本质是捕获的设计/解决问题的知识。,A,"正确
错误
",4
1221807000,复用者需要知道如何使用被复用的对象是软件复用必须解决三个基本问题之一。,B,"错误
正确
",4
1221786879,基于软构件的应用系统构造（集成和组装）或基于复用的软件开发，是使用软件资产生产新系统的过程，也称为_______。,,应用工程,3
1221826882,_____是一些经常使用、经过检验的规范化程序或子程序的集合。,,程序库##%_YZPRLFH_%##函数库,3
1221824895,框架与设计模式都属于软件复用，相似，却有着根本的不同，以下描述正确的是（）。,ACDE,"框架可以用代码表示，也可以直接执行或复用
框架可适用于各种应用
设计模式只有实例才能用代码表示 
设计模式比框架更抽象
设计模式是比框架更小的元素
",2
1221803876,软件复用的优点有（）,ABCD,"减少维护代价
提高生产率
提高互操作性
支持快速原型
提高程序运行速度
",2
1221783895,设计模式是独立的实体，表示在高抽象层的设计模式会影响在较低抽象层的其他模式的应用方式。,A,"错误
正确
",4
1221801976,"FreeMarker是一个模板引擎，它基于模板来生成文本输出,输出的格式包括（）。",ABC,"RTF
XML
HTML
Python源码
",2
1220450118,（）是与表示无关的数据类型，是一个数据模型及定义在该模型上的一组操作。,B,"引用类型
抽象数据类型
对象类型
基本类型
",1
1220449189,用面向对象开发软件时，我们把系统模块化成（），它们封装了属性及其操作的方法。,A,"类
子系统
对象
模块
",1
1220444102,（）是设计类的基本方法，使我们专注关心问题而忽略其他。,A,"抽象
专一化
模块化
封装
",1
1220438166,（）明确某事能完成，但是不告诉是怎样做到的。换句话说，它对类的使用者隐藏了实现细节。,B,"模块化
封装
专一化
抽象
",1
1220450120,模块化原则——（）仍然适用于评价面向对象程序。包括类的内聚、方法的内聚；不同类之间的耦合、同一个类不同对象之间的耦合及同一个类内函数之间的耦合。,D,"松内聚、松耦合
松内聚、紧耦合
紧内聚、紧耦合
紧内聚、松耦合
",1
1220433347,（）是那些仅仅可以访问当前抽象的表示就能有效实现的操作。,D,"完整操作
实际操作
抽象操作
原始操作
",1
1220436099,Meyer 认为程序设计本质上是（）：一个较大问题的功能通过把它们分包到不同元素的设计，而分解成若干较小的问题。,A,"契约
抽象
分解
编码
",1
1220447387,"类的接口可以进一步分成 4 类：公共的,保护的，私有的，（）。",C,"内部的
外部的
包
库
",1
1220454222,（）关系是一端带空心三角形的连线，绘制时从子类到父类，空心三角形一端是父类。,C,"组合
继承
泛化
依赖
",1
1220449195,不应该强迫客户依赖于它们不用的方法。这是（）原则。,D,"里氏代换
单一职责
开放封闭
接口隔离
",1
1220452086,类的接口可以进一步分成 4 类:公共的、保护的、私有的、()。,B,"模块的
包
连接的
聚合的
",1
1220441126,所有（）都有能力扫描代码并发现常见错误。,B,"交换器
编译器
集线器
调试器
",1
1220440356,一个类的设计要尽量使其所有操作都是（ ），每个操作仅提供简单、良好定义的行为。,D,"丰富的
独立的
简明的
原始的
",1
1220454349,分析第3章案例的设计，最好把类BinaryOperation设计为（ ）。,A,"抽象类
接口
具体类
区别不大
",1
1220450271,（），如函数的内部变量、类的成员变量，是实现模块化的一种重要机制。,A,"局部化
临时变量
作用域
打包
",1
1220440243,程序设计有两种抽象，分别是（）（函数抽象）和（）。,AC,"数据抽象
对象抽象
过程抽象
功能抽象
接口抽象
",2
1220440244,面向对象中有三种类关系（）,ACD,"继承
导航
聚合
关联
组成
",2
1220442106,类的接口可以进一步分成 4 类（）,ABDE,"私有的
保护的
继承的
包
公共的
",2
1220431155,用面向对象开发软件时，通常先设计一个包含（）的类。然后，随着类的使用，会发现需要补充、修改甚至细化类及其接口。,AB,"方法
基本属性
析构函数
构造函数
接口
",2
1220446314,调试器让程序暂停执行的一些基本方法有（）,BCE,"注释后面代码
设置断点
临时断点
使用输入函数让程序等待输入
单步调试
",2
1220438162,广义地说，接口是一些面向对象语言的基本元素。,A,"错误
正确
",4
1220441119,启动调试程序有两种方式：选择菜单 Run→Debug As和选择 debug 的图标。,A,"正确
错误
",4
1220440235,多数调试器不允许设置监视点来应对变量值的变化。,A,"错误
正确
",4
1220431125,调试与测试都是分析程序代码、选择性地运行程序，并观察程序的结果或运行过程。,A,"正确
错误
",4
1220448286,模块间的耦合不适用于面向对象程序。,B,"正确
错误
",4
1220451379,合成复用原则 （Composite/Aggregate Reuse Principle，CARP）是指尽量使用组合/聚合关系，而不使用继承。,B,"错误
正确
",4
1220442098,经典的计算机系统按照抽象程度从低到高构成了层次结构。,B,"错误
正确
",4
1220444099,对面向对象而言，程序中所有的基类对象都可以用其子类对象替换。,A,"正确
错误
",4
1220448288,程序构造过程遵循分而治之、循序渐进的策略。,A,"正确
错误
",4
1220431258,软件设计的单一职责原则（Single Responsibility Principle，SRP），在面向对象中的含义是就单个类而言，应该只有一个引起它变化的原因。 ,B,"错误
正确
",4
1220452201,里氏代换原则（Liskov Substitution Principle，LSP）是设计类层次结构的基本原则，它要求子类型可以替换其基类型。,B,"正确
错误
",4
1220440352,根据里氏代换原则，应该尽可能继承具体类。,A,"错误
正确
",4
1220445238,对象的上转型对象是子类对象的简化，它关心子类的新增功能及其继承和重写功能。,A,"错误
正确
",4
1220439223,根据第3章案例设计二，BinaryOperation对象可以访问子类继承或隐藏的成员变量，可以操作子类新增的成员变量、调用子类新增的方法。,B,"正确
错误
",4
1220452204, 根据第3章案例设计二，类BinaryOperation中计算算式结果的方法calculate()最好是具体方法。,A,"错误
正确
",4
1220442096,________是一个值的集合和定义在这个值集上的一组操作的总称。,,数据类型,3
1220449184,面向对象软件还有一种常见的关系——________，它表示关系一端的成员以某种方式依赖于关系另一端的成员。,,依赖,3
1220437112,_________方法倾向于创建一些高层模块依赖于低层模块、抽象依赖于细节的软件结构。,,结构化分析和设计,3
1220445116,多数调试器允许设置________来应对变量值的变化。,,监视点,3
1220449186,构件的外部不能随意访问构件的内部数据和操作，而只允许通过由构件提供的外部可用的操作来访问其内部，这就降低了构件间的________。,,耦合度,3
1220439110,程序设计有两种抽象，分别是过程抽象和（）。,A,"数据抽象
接口抽象
类抽象
函数抽象
",1
1220452081,（）是在使用一个函数或方法时知道它干什么，而不知道它是如何完成的。,A,"过程抽象
数据抽象
类抽象
接口抽象
",1
1220436095,封装有两个含义：①把描述一个事物的性质和行为结合在一起成为构件，对外形成该事物的一个界限，封装使构件能够集中而完整地对应并描述具体的事物，体现了事物的相对独立性；②（），即外界不能直接存取构件的内部信息（属性）及隐藏起来的内部操作，外界也不必知道操作的内部实现细节才能使用这些操作,D,"安全性
保护
私有化
信息隐藏
",1
1220431131,面向对象中有三种类关系。第一种是普通与特殊（继承），第二种是整体-部分（），即“是成员”关系，第三种是关联，表示没有其他关系的类之间的某种语义依赖。,B,"依赖
聚合
组成
泛化
",1
1220451389,在 UML 中，类是用一个带有类名、可选属性和操作（）表示,D,"梯形
菱形
圆形
矩形
",1
1220431133,（）是一种语义更强的聚合，部分组成整体，不可分割。,A,"组合
打包
耦合
联合
",1
1220432261,设计模式是在软件开发过程中出现了一些可反复使用、解决实际问题的解决方案，通常不包含（）。,B,"设计结构
 用户需求
解决思路
案例研究
",1
1220441249,JUnit把任何用@Test注解的方法当成一个测试用例，关于JUnit的测试方法或测试函数，不正确的说法是（ ）。,D,"没有参数
ABC都对
随意命名
有返回值
",1
1220455129,数据类型可分为两类：（）。,AC,"原子类型
引用类型
结构类型
抽象类型
基本类型
",2
1220450128,针对面向对象开发范式的特性，下列哪些是人们经过反复的实践和总结，提炼出的面向对象的基本原则。（）,ABCDE,"接口隔离原则
里氏代换原则
开放封闭原则
单一职责原则
依赖倒转原则
",2
1220444097,数据类型是一个值的集合和定义在这个值集上的一组操作的总称。,A,"正确
错误
",4
1220447379,数据类型明显或隐含地规 定了数据的取值范围、存储方式及允许进行的运算。,A,"正确
错误
",4
1220450112,用面向对象开发软件时，我们把系统模块化成类，但不封装属性及其操作的方法。,A,"错误
正确
",4
1220444098,关键抽象是构成问题域术语的一个类或对象。其主要价值在于识别确定问题边界的抽象，指出在系统中出现的问题相关的类（领域类）、因而与设计相关的事情。,A,"正确
错误
",4
1220431124,每个编程语言的开发工具包通常都提供基本的调试器。,A,"正确
错误
",4
1220451378,有时需要在显示的代码中临时设置有期限的断点，以便细致观察程序。,B,"错误
正确
",4
1220448285,只有部分编译器都有能力扫描代码并发现常见错误。,A,"错误
正确
",4
1220455119,松散耦合的一个作用是避免程序的一处改动产生连锁反应，导致一系列相关模块的改动。,A,"正确
错误
",4
1220450113,合成和继承都能实现复用。,B,"错误
正确
",4
1220448287,实现开闭原则的核心是共性和个性分析，关键是抽象。,A,"正确
错误
",4
1220445117,监视点对局部变量的用途比对作用域更宽的变量的用途大。,B,"正确
错误
",4
1220443106,最基本的监视点形式就是通知调试器，每当指定变量的值发生变化时，都暂停程序的运行。,B,"错误
正确
",4
1220441121,运用调试器可以观察运行栈，追踪函数之间的调用关系和变量值的来源、变化等信息。,B,"错误
正确
",4
1220446277,________可以视为模块组合的一种机制。通过函数调用把函数联系起来，构成更大规模的程序。,,函数调用,3
1220448284,多态是类型理论的概念，一个名字可以表示多个不同类的实例，只要他们具有某个共同的________而且相关。,,超类,3
1220446278,运用________可以让程序在执行过程中暂停，以便观察程序的变化和状态，得到关于程序错误所在位置的线索。,,调试器,3
1220431129,类的模块化准则要求一个类应当是（）、原始的、充分的。,C,"丰富的
安全的
完整的
抽象的
",1
1220435316,（）是类型理论的一个概念，一个名字可以表示多个不同类的实例，只要它们具有某个共同的超类而且相关。,B,"封装
多态
接口
继承
",1
1220447386,（）是整理知识的一种手段。,A,"分类
抽象
模块化
封装
",1
1220443114,类的（）提供了外部视角，重在抽象，同时隐藏了它的结构和组成。,C,"操作
方法
接口
属性
",1
1220434211,依据（）原则，第3章案例设计二，应该把类Exercise的产生职责和使用职责分离开。,D,"接口隔离
开放封闭
依赖倒转
单一职责
",1
1220440361,"根据依赖倒转原则（Dependency Inversion Principle，DIP）, （ ）。",B,"高层模块依赖于低层模块
低层模块负责实现
实现不依赖于抽象
抽象依赖于实现
",1
1220442108,设计时应考虑以下问题（）,ABDE,"适应
复杂
风格
实现知识
复用
",2
1220439129,确保每个程序员代码质量的一个重要技术就是测试，特别是对程序的基本组成——（）的单元测试。,ACD,"类
变量
方法
函数
常量
",2
1220444096,抽象是指对于一个过程或一件事物的全部细节有目的地隐藏，以便把其他方面、细节或结构表达得更加清楚。,B,"正确
错误
",4
1220441120,测试实施占据了测试的大部分工作和时间，而这部分工作相对测试设计，具有重复性和机械性，容易实现自动化。,A,"正确
错误
",4
1220450264,使用Junit可以实现自动化测试，不用编写代码。,B,"正确
错误
",4
1220453443,测试工具Junit能自动判断待测程序是否正确。,A,"错误
正确
",4
1220446275,有两种表示“整体-部分”的特殊关联——聚合和________。,,组合,3
1220452078,课程使用的________包含了对核心数据的产生、变更和使用的操作函数。,,函数簇,3
1220450117,数据类型可分为两类：（）、结构类型。,A,"原子类型
引用类型
基本类型
抽象类型
",1
1220453338,用面向对象开发软件时，通常先设计一个包含基本属性和（）的类。然后，随着类的使用，会发现需要补充、修改甚至细化类及其接口。,A,"方法
可见性
接口
操作
",1
1220441125,（）主要由包括所有适用于类的操作的声明、其他类的声明、变量的声明，以及要完成抽象的异常的声明。,D,"方法
操作
基本
接口
",1
1220453340,子类型必须能够替换它们的基类型。这一思想体现了对继承机制的约束规范，只有子类能够替换基类时，才能保证系统在运行期内识别子类，这是保证继承复用的基础。这是（）原则。,D,"依赖倒转
单一职责
开放封闭
里氏代换
",1
1220445126,面向（）的语言主要通过数据的作用域、文件包等方式保护数据，不让程序的其他部分随意改动内部数据、数据结构中的成员。,C,"对象
模块
过程
连接
",1
1220449322,现代软件开发的一个基本原则是：（ ）测试代码、提供可运行的软件。,B,"分离
尽早
推迟
封装
",1
1220449217,下面表示“整体-部分”的特殊关联的是（）,BD,"依赖
聚合
泛化
组合
继承
",2
1220439224,下面关于依赖倒转原则（Dependency Inversion Principle，DIP），正确的说法有（ ）。,CD," 高层调用低层的功能
 高层模块依赖于低层模块
低层模块负责实现
 抽象不依赖于实现
",2
1220434207,根据第3章案例设计二，关于BinaryOperation对象的正确描述是（ ）。,ABD,"可以访问子类隐藏的成员变量
可以访问子类继承的成员变量
可以调用子类新增的方法
A.    可以调用子类重写的实例方法
可以操作子类新增的成员变量
",2
1220433342,在函数调用期间，与函数关联的运行时信息存储在称为帧的内存区域中。,B,"错误
正确
",4
1220442211,根据第3章案例设计一，算式的组成成分（两个运算数和一个运算符）在生成之后不能改变，所以类BinaryOperation不提供实例变量的赋值访问器。 ,B,"错误
正确
",4
1220441116,抽象是从众多的事物中抽取出共同的、________的特征，而舍弃其非本质的特征。,,本质性,3
1220445115,一个类的设计要尽量使其所有的操作都是________的，每个操作仅提供简单、良好定义的行为。,,原始,3
1220446276,________，如函数的内部变量、复合语句的内部变量，是实现模块化的一种重要机制。,,局部化,3
1220432124,程序设计有两种抽象，分别是________（函数抽象）和数据抽象。,,过程抽象,3
1220446280,（）是从众多的事物中抽取出共同的、本质性的特征，而舍弃其非本质的特征。,A,"抽象
模板
模块
封装
",1
1220446288,抽象类的子类，必须实现抽象父类定义的抽象方法才能生成对象，即低层的子类依赖高层的、抽象的父类。这种设计思想运用了面向对象技术中的（）原则。,A,"依赖倒转
单一职责
里氏代换
开放封闭
",1
1220451395,模块化原则——紧内聚、松耦合仍然适用于评价面向对象程序。包括（）,ABDE,"类的内聚
不同类之间的耦合
数据的内聚
同一个类不同对象之间的耦合及同一个类内函数之间的耦合
方法的内聚
",2
1220435336,在 UML 中，类是用一个带有（）矩形表示。,ADE,"可选属性
方法
可见性
类名
操作
",2
1220432126,模块间的耦合也可以适用于面向对象程序。,A,"错误
正确
",4
1220438163,当调试器暂停了程序运行后，不可以执行一些调试命令来显示、改变程序变量的值。,A,"错误
正确
",4
1220453442,根据依赖倒转原则（Dependency Inversion Principle，DIP），高层模块依赖于低层模块，两者都依赖于具体。,A,"错误
正确
",4
1220451377,构造器主要是供类或对象本身之外的使用者用来创建________的。,,对象,3
1220455249,实现开闭原则的核心是共性和个性分析，关键是（ ）。,A,"抽象
模块化
分离关注点 
封装
",1
1220435319,在软件开发中，封装具有如下优势（）。,ABCE,"构件的内部修改对外部的影响变小，减少了修改引起整个程序范围的“波动效应”。
更容易快速开发正确的程序，因为程序员在编写一个构件时只需考虑少量事情。在一个包含多人的项目中特别有用：一旦程序员们确定了构件间的交互，每个人都可以独立地开发和测试分配的构件。事实上，没有封装，是不可能编写、调试和维护非常大的程序的。
构件的外部不能随意访问构件的内部数据和操作，而只允许通过由构件提供的外部可用的操作来访问其内部，这就降低了构件间的耦合度，还可以避免外部错误对程序其他部分的“交叉感染”。
封装使得编程更加简单清晰，提高了代码的执行效率。
改善通用性和维护性，因为需要复用构件、组合成软件，需要构件尽可能通用、正确；理解一个构件无须理解整个程序，自由地改进构件的内部，有助于维护程序。
",2
1220432149,合成复用原则（Composite/Aggregate Reuse Principle，CARP）是指尽量使用（）关系，而不使用继承。,AB,"组合
聚合
继承
依赖
泛化
",2
1220436093,严格的封装不会带来诸如编程麻烦、执行效率的问题。,B,"正确
错误
",4
1220450110,_______解决的是如何划分一个系统的功能的设计问题。,,封装,3
1220443105,依赖表示关系一端的成员以任意方式依赖于关系另一端的成员。,B,"正确
错误
",4
1220438161,函数调用可以视为________的一种机制。,,模块组合,3
1220449185,狭义地说，________是一些面向对象语言的基本元素，必须有具体的类才能实现它定义的操作。,,接口,3
1220436092,________是指对于一个过程或一件事物的某些细节有目的地隐藏，以便把其他方面、细节或结构表达得更加清楚。,,抽象,3
1220445127,每个编程语言的开发工具包通常都提供基本的（）。,D,"交换器
集线器
编译器
调试器
",1
1220455121,利用单步命令，从断点处开始一次处理多条语句。,B,"正确
错误
",4
1220451507,根据里氏代换原则，良好的设计应该把算式类BinaryOperation设计成（ ）。,D,"核心类
具体类
基础类
抽象类
",1
1220436104,有些语言如（）允许以重载方式对运算符“+”定义不同的意义（运算符重载），比如字符串的连接、有理数的加法等。,ACD,"C#
Objective-C
C++
Python
JAVA 
",2
1220451376,用面向对象开发软件时，我们把系统模块化成类，它们封装了________及其操作的方法。,,属性,3
1220627397,"能够匹配正则表达式""[A-Z]*\+[0-9]+""的是",D,"98
B9
AA++4
+5
",1
1220648200,在程序的编写、调试阶段，可以插入（ ）来捕捉程序出现的错误，提高编程效率。,C,"返回
异常
断言
删除
",1
1220647405,断言分为前置断言、后置断言、（ ）三类。,D,"常数断言
中置断言
判断断言
不变断言
",1
1220636396,异常处理一般有终止模式和（ ）两种类型,A,"恢复模式
中继模式
中断模式
暂停模式
",1
1220638253,能够匹配年月日日期（格式2018-12-6）的正则表达式是（ ）。,C,"^[1-9]*[1-9][0-9]*$
[https]{2,5}:[//www]{2,5}.*(?<=.)[html|com]
^[1-9]d{0,3}-(1[0-2]|0?[1-9])-(3[01]|[12]d|0?[1-9])$
[0-9a-zA-Z][w-.]+@[a-zA-Z0-9-]+(.[a-zA-Z0-9-]+)*.[A-Za-z0-9]{2,6}
",1
1220635278,表驱动测试又称（ ）。,A,"数据驱动测试
数据结构测试
数据变化测试
过程变化测试
",1
1220810190,（ ）是指程序对于要求之外的输入进行判断并处理、使程序保持运行状态。,C,"流程性
稳定性
健壮性
过程性
",1
1220784744,正则表达式是一串,D,"汉字
数字
字母
字符
",1
1220770683,基于程序结构的测试方法，不包括,D,"路径覆盖测试
语句覆盖测试
判断覆盖测试
边界值测试
",1
1220790657,JUnit4通过@Test注解中的expected属性来测试异常，如果运行Junit、结果显示该测试失败，正确的描述是,D,"待测程序出错了
待测程序应该抛出异常
待测程序没有错误
待测程序不应该产生异常
",1
1220631220,断言的基本用途是（ ）程序。,BC,"维护
调试
测试
调节
运行
",2
1220646259,文件分为（ ）。,AC,"物理文件
线性文件
逻辑文件
流程文件
数字文件
",2
1220644223,逻辑文件从结构上分为（ ）。,AC,"记录文件
数字文件
流式文件
流程文件
符号文件
",2
1220646270,错误处理的方式影响软件满足（ ）的能力。,ABCD,"逻辑性
正确性
及时性
健壮性
功能性
",2
1220628545,防御性编程的基本的方式有（ ）。,BD,"使用返回
处理错误
处理断言
使用异常
使用断言
",2
1220645264,下列关于类和对象的叙述中，错误的是（ ）。,AB,"类只能调用其自己的成员函数
一个类只能有一个对象
类是对某一类对象的抽象
对象是类的具体实例
类和对象的关系是一种数据类型与变量的关系
",2
1220804272,数据可以从程序的外部输入到程序中，外部源可以是,ABCDE,"程序中的变量
文件
命名的管道
读/写内存的区域
网络上的数据
",2
1220808999,"能够匹配Java正则表达式 “[1-9][0-9]*[\+\-][0-9]{1,2}” 的算式有",ABD,"99+5
1-01
120-0
3+4
010+09
",2
1220796552,"能够匹配Java正则表达式 “[1-9][0-9]？[\+\-][0-9]{1,2}” 的算式有",ABD,"1-01
3+4
010+09
99+5
120-2
",2
1220795452,能够匹配Java正则表达式 “[+-]?[0-9]+[.]?\d+” 的有,BC,"+8.88
-.88
+88
+-88
-88
",2
1220646280,异常处理中的终止模式一旦抛出异常， 不能表明错误已无法挽回。,A,"错误
正确
",4
1220636418,存储在程序中的变量或数组中的数据是临时的，只有当程序在内存中运行时才能使用它们。,A,"正确
错误
",4
1220644233,软件的数据结构改变时，程序不必改变。,B,"正确
错误
",4
1220641644,为了使程序独立于物理设备或操作系统，应该使用一个独立的对象来传输数据。,A,"正确
错误
",4
1220632681,表驱动测试是用一个测试代码重复地使用不同的输入和响应数据的测试技术。,A,"正确
错误
",4
1220628553,程序不必借助一个连接内存中的程序和外存设备的通道。,B,"正确
错误
",4
1220810201,表驱动编程把复杂的逻辑编织在表中，会使得程序结构简洁、逻辑清晰、容易修改和扩展。,A,"正确
错误
",4
1220797410,条件覆盖的准则是，设计测试用例，使得程序中的每个简单布尔条件的所有可能的值都至少满足一次。判定覆盖准则测试的含义是，设计测试用例，使得程序中的每个判断的分支都至少经历一次。从定义可以看出，条件覆盖比判定覆盖能发现更多的错误。,A,"错误
正确
",4
1220794776,JUnit4通过@Test注解中的expected属性来测试异常。如果运行Junit、结果显示测试通过，则说明待测程序不应该抛出异常。,A,"错误
正确
",4
1220806856,Java程序的源代码通常都是用字节文件存储的。,B,"正确
错误
",4
1220637706,文件是对需要存储对象的一种（ ）描述。,,抽象,3
1220636416,如果写出或读入的外部源是文件，就简称为（ ）。,,文件流,3
1220811888,Java、C#等面向对象语言都有实现对象（ ）的类或接口，把对象数据转换成字节序列的形式，与外部源共享或传输数据。,,序列化,3
1220794772,在程序的结构分析中，程序的圈复杂数等于其（ ）数。,,基本路径,3
1220810199,JUnit提供了测试（ ）像个容器，将所有需要运行的测试类集中起来，一次性运行，提高了测试效率。,,套件##%_YZPRLFH_%##suite,3
1220643354,将对象的成员变量转换为可以存储或传输的形式的过程就是,A,"序列化
编程化
立体化
结构化
",1
1220624414,软件的横向重用是指重用不同应用领域中的软件元素。（ ）是一种典型的、原始的横向重用机制,C,"构件
对象
标准函数库
设计模式
",1
1220625236,"能够匹配Java正则表达式""[A-Za-z][A-Za-z0-9]*@[1-9]{3,5}[.]com""是",C,"disizhang@22.com
disizhang@163
disizhang@1263.com
disizhang@126.
",1
1220629265,文件在计算机内是（ ）存储的。,B,"多维
线性
体系
结构性
",1
1220784745,程序单元的圈复杂数反映了程序单元的复杂程度，一般情况下，圈复杂数超过了（ ）就要采用基本路径覆盖的测试。,A,"5
9
7
3
",1
1220805844,下面关于逻辑覆盖测试方法中，正确的说法是,B,"判定覆盖比条件覆盖的测试能力弱
判定覆盖和条件覆盖的测试能力不同
判定覆盖和条件覆盖的测试能力一样
判定覆盖比条件覆盖的测试能力强
",1
1220798393,根据本课程定义的算式基，运算数范围在（0..100]的不同的减法算式的个数是,B,"200
5050
100
10100
",1
1220803392,有关文件，（ ），是不正确的说法。,B,"在操作系统中，文件是组织和管理数据的基本单位
使用者要知道文件的存取方式和存储位置
在操作系统中，文件是对物理输入/输出设备的抽象
文件都是以二进制格式存储的
",1
1220648213,计算机程序的语句一般分为（ ）。,AC,"简单语句
顺序语句
复合语句
结构语句
逻辑语句
",2
1220636408,为了方便基于图的测试设计，在程序控制流图完成后，需要对程序控制流图再做（ ）。,AD,"合并简单的顺序语句
结合数据结构
离散数据结构
分解复合条件
重构程序结构
",2
1220629276,（ ）不是面向对象语言不同于面向过程语言提高程序可靠性的重要机制。,BCDE,"异常处理
返回数值
插入断言
多态
程序暂停
",2
1220803393,防御编程的基本思想是：程序员要预计其他程序员的过错、对( )，采取适当措施保护自己的程序。,BCD,"需求歧义
有害的输入数据
无效的输入
调用者过失
编程错误
",2
1220803395,程序运行期间难免出错，数据错误出现时可行的处理方式包括,BCDE,"继续运行程序、返回错误的数据
返回一个错误编码
屏幕显示错误信息
继续运行程序，在日志中记录警告信息
尽可能在局部处理错误
",2
1220806850,能够匹配Java正则表达式 “[+-]?[\d+]?[.]?\d*” 的有,ABCD,"8.88
-.88
-88
+88
",2
1220640239,"恢复模式认为异常处理程序的工作是修正错误，重新尝试调动出问题的方法, 并认为二次处理能成功。",B,"错误
正确
",4
1220631236,如果对象中成员变量也是一个类的对象实例，即两个类之间的关系是聚合关系，这样，序列化整体对象时不必序列化部分对象。,A,"错误
正确
",4
1220795458,有些测试函数的代码结构基本相同，不同的仅仅是测试数据和期望值，JUnit 4为此提供了测试套件。,A,"错误
正确
",4
1220804282,逗号分隔值（CSV）文件以纯文本的形式存储数据，CSV文件由任意数目的记录组成，记录之间只能用逗号分隔。 ,B,"正确
错误
",4
1220813140,一般而言，100%的语句覆盖测试就能保证程序正确无误。,A,"错误
正确
",4
1220795460,常使用程序控制流图（Control Flow Graph，CFG）来表示程序的控制流，因而在测试中，语句覆盖也就是节点覆盖。,A,"正确
错误
",4
1220644228,文件的种类按照存储形式，可分为文本文件和（ ）文件。,,二进制##%_YZPRLFH_%##字节,3
1220646276,（ ）的概念使我们能从各种不同的物理设备在逻辑上以相同的方式传输数据。,,流,3
1220797407,所谓（ ）编程指的是，程序员要预计其他程序员或者使用本程序的其它程序的过错，采取适当措施保护自己的程序。,,防御性##%_YZPRLFH_%##防御,3
1220787686,"（ ）编程是对软件系统中元素之间相互合作及“责任”与“义务”的比喻, 要求软件开发者为软件模块定义正式的、精确的并且可验证的接口。",,契约式##%_YZPRLFH_%##programming by contract，design by contract,3
1220795455,软件测试中，设计测试用例，使得程序的每条基本语句都得到执行，称为（ ）的测试。,,语句覆盖,3
1220634492,面向对象编程语言提供了（ ）机制来处理错误。,A,"异常
删除
插入
返回
",1
1220648889,记录是一段有关系的（ ）。,B,"字段
字符串
队列
栈
",1
1220796550,根据本课程定义的算式基，运算数范围是[0..100]的不同的加法算式的个数是,B,"100
5051
10201
200
",1
1220811885,JUnit4通过@Test注解中的expected属性来测试异常，如果运行Junit、结果显示该测试通过，正确的描述是,B,"待测程序出错了
待测程序应该抛出异常
待测程序不应该产生异常
待测程序没有错误
",1
1220805061,在程序中，可以把文件理解成物理概念，流是（ ）概念。,A,"逻辑
操作
抽象
具体
",1
1220793221,本章案例新增了练习批改的功能，它能从文件中读取练习的结果和和正确的答案。运用可靠性编程，这个功能的代码要适当增加错误处理或异常处理，可能的情形不包括,B,"参考答案文件的格式不符合约定
参考答案中有错误的答案
参考答案的数目与练习题的数目不等
练习结果的文件不存在
",1
1220804270,在之前构造的案例程序中，产生的算式、习题数据都以程序变量的值出现在计算机的内存中，这种数据处理方式具有的局限性包括,ABC,"执行效率低
不利于复用
不利于共享
产生习题快
",2
1220804273,能够匹配Java正则表达式 “[A-Za-z0-9]+” 的有,BCD,"44
Aa4
A4
4aZ
Z+
",2
1220630296,通常要在编译器启动断言检查后才能在程序中使用断言。,B,"错误
正确
",4
1220648221,根据良好编程的一个基本原则，程序中每个组成语句和变量等都要有用，即完成指定的 功能，不多也不少。,A,"正确
错误
",4
1220640243,程序直接操作外部存储器中的数据。,A,"错误
正确
",4
1220801344,使用表驱动编程，可以把复杂的逻辑编织在表中，表的设计不会影响程序的设计。,B,"正确
错误
",4
1220791435, JUnit4通过@Test注解中的expected属性来测试异常。如果运行Junit、结果显示测试失败，则说明待测程序不应该抛出异常。,B,"错误
正确
",4
1220635303,如果数据是从某个外部源传入程序，称为（ ）。,,输入流,3
1220806852,（ ）以纯文本形式存储数字和文本数据，被许多表格处理软件、数据库系统等软件支持和使用。,,逗号分隔值##%_YZPRLFH_%##CSV,3
1220804278,本课程，为了持久地存储全部有限数量的基本算式，并把它们用二维数组的数据结构存储到文件中，独创并使用了（ ）这个概念。,,算式基,3
1220791432,把复杂的控制逻辑的信息转换成数据，存放在表中，通过访问表化简复杂逻辑而实现程序的方式称为（ ）。,,"表驱动编程##%_YZPRLFH_%##programming driven by table, table driven programming",3
1220798397,"根据本课程，当满足0≤i, j≤100的行i和列j，就能从算式基矩阵OperatinBase得出加法或减法的算式，特别是当i+j≥100时，矩阵OperatinBase [i,j]得到得到算式",D,"j-i
i+j
i-j
i  j  100
",1
1220802106,表驱动编程中，查询表项的基本方式不包含,A,"间接访问
阶梯访问
直接访问
索引访问
",1
1220793220,表驱动编程中，对表项的阶梯访问方式，不正确的说法是,B,"表中的项表示一个数据范围
数据按照降序排列
数据按照升序排列
不容易处理不规则的数据
",1
1220635279,逻辑覆盖测试主要包含了（ ）准则。,CD,"科学覆盖
结果覆盖
条件覆盖
判定覆盖
流程覆盖
",2
1220637707,契约式编程要求软件开发者为软件模块定义正式的、精确的并且可验证的接口。,A,"正确
错误
",4
1220797409,断言可以视为契约式编程的一部分，它为实现契约式编程提供了语言基础。,A,"正确
错误
",4
1220770690,（ ）是指程序对于要求之外的输入进行判断并处理、使程序保持运行状态，即使这有时可能导致不准确的结果。,,健壮性,3
1220805069,软件测试中，设计测试用例，使得程序中的每个简单布尔条件的所有可能的值都至少满足一次，称为（ ）的测试。,,条件覆盖,3
1220640220,为了方便测试和设计，通常使用（ ）来表示程序的控制流。,B,"过程图
程序控制流图
流程图
程序行进图
",1
1220643365,（ ）是让程序在运行过程中自我检查的代码。,B,"返回
断言
异常
中断
",1
1220625238,计算机使用（ ）长期保留大量的数据。,A,"文件
数组
变量
操作系统
",1
1220807969,程序设计语言的断言主要分为如下的类别,CDE,"有效断言
中置断言
不变断言
后置断言
前置断言
",2
1220635304,一般而言，程序设计语言数据结构的数据集不依附于应用程序。,B,"正确
错误
",4
1220795459,程序的健壮性是指程序对要求之外的输入进行判断并处理、使程序保持运行状态，并确保程序产生准确的结果。,A,"错误
正确
",4
1220784750,根据语句覆盖的基本准则，设计测试用例，要使得程序的每条语句都得到执行。,A,"错误
正确
",4
1220802221,在结构化测试方法中，判定覆盖和语句覆盖等价：可以设计满足判定覆盖的最少的一组测试用例，也能满足语句覆盖；反之也成立。,A,"错误
正确
",4
1220643390,在程序中，可以把文件理解成物理概念，流是逻辑概念。,B,"错误
正确
",4
1220809000,对于较大的数据数量、要在程序之间交流共享、并且在程序退出运行后好存在，数据可以存储在数据库或者（ ）中。,,文件,3
1220794771,在计算机建模中，常常使用（ ）来表示程序语句执行的先后顺序、跳转分支、函数调用等程序的运行结构。它也是路径测试的基础。,,程序控制流图##%_YZPRLFH_%##Control Flow Graph##%_YZPRLFH_%##CFG,3
1220646274,案例的持久性问题，本质上是程序之间的一种（ ）。,,交互,3
1220624434,异常使用得当，能降低程序的复杂性。,B,"错误
正确
",4
1220803397,程序单元的圈复杂数就是它的基本路径的数量，所以，覆盖基本路径的测试数据集一定是唯一的。,B,"正确
错误
",4
1220647423,在操作系统中，（ ）是组织和管理数据的基本单位。,,文件,3
1220801343,JUnit提供的测试套件实际上像个容器，它把所有需要运行的测试集中起来，一次性运行就能完成其中的所有测试。,A,"正确
错误
",4
1220805851,软件测试中，设计测试用例，使得程序中的每个判断的分支都至少经历一次，称为（ ）的测试。,,判定覆盖##%_YZPRLFH_%##分支覆盖,3
1221341377,菜单选择用（ ）结构组织把程序的多个功能组织并呈现出来，是用户交互的一种重要形式,B,"自动化
层次化
多态化
变量化
",1
1221333738,图形用户界面 GUI用户通过（ ）识别与控制交互元素，进行有目的性的操作。,B,"数字
图形
键盘
字符
",1
1221351502,图形用户界面 GUI编程的核心技术是（ ）。,D,"中断处理
多线程编程
进程通讯
事件驱动
",1
1221354893,下列不是交互设计的基本原则的是（ ）。,A,"快速性
灵活性
健壮性
学习性
",1
1221342391,在虚拟现实中，人是（ ）参与者，复杂系统中可能有许多参与者共同在以计算机网络系统为基础的虚拟环境中协同工作。,D,"客观
次要
被动
主动
",1
1221354464,对于交互式系统中提供信息反馈，下列说法错误的是（ ）。,A,"对少用的操作，反馈信息应当精简
对常用操作，反馈信息可以减短
对每个用户动作都要有反馈
界面对象的可视化表现的变化应该能够清醒地提供这一反馈
",1
1221354900,（ ）是对代码的全面质量评审，包括代码的可维护性、可扩展性、可使用性，以及安全和编程规范是否得到遵守，是软件开发队伍对程序质量和信赖性进行的自我评估。,B,"桌面检查
同行评审
正式审查
代码走查
",1
1221353486,设计评估即评估交互设计的可运行性和（ ）。,C,"灵活性
稳定性
可接受性
健壮性
",1
1221342394,驱动模块和（ ）是常见的基本的模拟程序。,B,"树模块
桩模块
堆模块
栈模块
",1
1221341389,以下叙述正确的是（ ）。,A,"一个类可以实现多个接口。
接口中可以包含已实现的方法。
接口中可以有虚方法。
接口能被实例化。
",1
1221338391,交互设计的最基本原则包括（ ）。,BDE,"快速性
灵活性
美观性
健壮性
学习性
",2
1221342400,设计的用户界面要尽量考虑用户的（ ）。,BCDE,"理解软件的方式
年龄范围
身体状态
主观审美体验
操作的熟练程度
",2
1221332715,方法重载(overload)必须满足（ ）。,CDE,"在不同class中定义的方法
返回类型必须相同
在同一类型中定义的方B法
参数可以相同
方法名必须相同
",2
1221354907,通过组织其他程序员共同参与的团队检查包括（ ）。,BC,"上机检查
正式审查
代码走查
桌面检查
通用性检测
",2
1221344425,设计评估即评估交互设计的（ ）。,AD,"可接受性
灵活性
稳定性
可运行性
健壮性
",2
1221346382,用户界面不可以视为集成程序的一种方式。,A,"错误
正确
",4
1221354912,交互设计的基本原则中学习性指的是新的用户能用它进行有效的交互并获得大的性能。,A,"正确
错误
",4
1221350342,对于交互界面设计规则中的允许撤销操作，应该尽量让操作容易撤回，以减轻用户的焦虑情绪，并鼓励用户尝试新的选项。,B,"错误
正确
",4
1221354478,用户界面与交互方式的好坏不全是由终用户评感性决定的。,B,"正确
错误
",4
1221348485,在交互设计基本过程中，用户交互的模型不是可运行的原型软件。,B,"正确
错误
",4
1221329725,静态程序分析好有自动化的工具支持，能更好地支持代码审查工作，为审查者提供更多的信息。,A,"正确
错误
",4
1221327447,终系统是软件需求全部功能的实现，而原型只实现所选择的部分功能。,B,"错误
正确
",4
1221338396,正式审查中审查人员的注意力集中在发现错误而非纠正错误上。,B,"错误
正确
",4
1221339410,静态程序分析通过扫描源程序而发现可能的故障或异常。,A,"正确
错误
",4
1221342403,驱动模块和桩模块是常见的高级的模拟程序。,A,"错误
正确
",4
1221347591,以真实用户和用户目标作为产品开发的驱动力而不仅仅以技术为驱动力是以（ ）为中心的开发方法。,,用户,3
1221348482,提出满足需求的候选设计方案可以细分为概念设计和（ ）两个子活动。,,物理设计,3
1221343497,设计评估即评估交互设计的可运行和（ ）。,,可接受性,3
1221348483,（ ）是原型制造的一种类型，重点是在开发过程早期开发原型，尽早得到反馈和分析来支持开发过程。,,快速原型,3
1221355866,直接关系着软件是否能满足用户的功能性需要，是用户体验中的一种工具性的成分的是（ ）。,,可用性,3
1221330448,DOS语言操作系统是（ ）用户界面。,C,"图像
虚拟
命令语言
GUI
",1
1221343488,对于设计对话框以产生结束信息，下列说法错误的是（ ）。,D,"应当把操作分成动作序列，有开始、中间和结束三个阶段。
每组动作结束后应该告诉用户系统已经准备好接收下一组动作。
设计能够终止的交互回话，使用户知道什么时候完成了任务。
应设计多个对话框，在每个操作完成后都给予用户提示。
",1
1221328399,下列对于快速原型的叙述错误的是（ ）。,A,"根据原型实现的特点和环境，可以把原型作为试验工具，用完可以循环使用。
在构造一个原型时，应当强调着眼于预期的评估，而不是为了正规地长期使用。
终系统对每个软件需求都要求详细实现，而原型仅仅是为了试验和演示用的。
开发系统采用原型法，需要有交互式开发环境、可复用代码框架及自动编程系统的支持。
",1
1221348466,集成策略的传统方法用（ ）状的结构图示意一个程序的组织结构。,A,"树
发散
线
环
",1
1221344420,基于 GUI 的人机交互过程极大地依赖于（ ）的参与。,BD,"感觉
视觉
嗅觉
手动控制
触觉
",2
1221347583,人机交互涉及（ ）。,ABCDE,"产品设计
认知科学
图形设计
心理学
计算机科学
",2
1221332717,程序的用户界面集成实质上就是如何把一组功能合理地组织并呈现给用户使用。,A,"正确
错误
",4
1221346383,使用一个软件时，用户终关心的是他想操作的对象，他不用关心任务语义。,A,"错误
正确
",4
1221349441,评估不能取代质量保证和软件测试活动，而是对其补充和加强。,A,"正确
错误
",4
1221340389,代码走查完全可以一个人完成，多人合作可以提高效率。,A,"错误
正确
",4
1221327448,静态分析的目的是引起程序员对程序中异常的警觉。,A,"错误
正确
",4
1221330460,（ ）是目标系统一个初步的形态、形式或实例，为系统的以后阶段或终的完 整版本当作模型。,,原型,3
1221336418,（ ）可以发现潜在的误解或功能在使用时存在的错误。,,测试,3
1221345391,静态测试中，程序员个人模拟计算机“阅读”程序，发现代码错误的方法是（ ）。,,桌面检查,3
1221337483,下列不属于交互式系统设计八条黄金规则的是（ ）。,B,"提供信息反馈
提供函数接口
预防并成立错误
尽量保持一致
",1
1221346379,静态测试常见的类型有（ ）。,ABCDE,"静态程序分析
桌面检查
正式审查
代码走查
同行评审
",2
1221355863,一般认为可用性的指标是（ ）。,ABCE,"易学性
交互效率
容错性
拓展性
易记性
",2
1221355868,面向对象语言 Java 的每个类都可以拥有一个主程序 main()。,A,"正确
错误
",4
1221327446,提出满足需求的候选设计方案中概念设计就是构思出软件系统交互的形式、手段、外观、步骤或流程等概念模型。,B,"正确
错误
",4
1221327442,交互设计的基本原则中，（ ）性是指在决定成就和目标评估方面对用户提供的支持程度。,,健壮,3
1221342402,代码走查和（ ）是通过组织其他程序员共同参与的团队检查。,,正式审查,3
1221327444,正式审查比代码走查在形式上更加正式，是一种正式的（ ）化检查和评估方法，一般有计划、流程、结果和追查。,,结构,3
1221337494,设计者完成任务分析并识别出任务对象和动作时，，可以选择（ ）交互风格。,ABCDE,"菜单选择
命令语言
表格填充
直接操纵
自然语言
",2
1221348477,交互设计的用户可用性需求包括（ ）。,ABCDE,"安全性
实用性
有效性
易学和易记性
能行性
",2
1221343496,交互界面设计的八条规则是（ ）、满足普遍可用性、提供信息反馈、设计对话框以产生结束信息、预防并成立错误、允许撤销操作、支持内部控制点、减轻短时记忆负担。,,尽量保持一致,3
1221347593,选择独立性大或者对其他模块依赖性小的模块开始，从程序结构图的底部开始，逐次增 加控制模块，直至完成整个程序，称为（ ）。,,自底向上集成,3
1221346377,交互设计的用户需求包括（ ）。,ACD,"速度需求
效率需求
功能需求
可用性需求
数据需求
",2
1221329723,显示器是用户从计算机得到反馈的主要输出设备。,B,"错误
正确
",4
1221335370,静态测试需要执行部分程序用于测试静态代码。,A,"错误
正确
",4
1221345393,在交互设计活动的设计与重新设计、构建原型及评估设计是交织在一起的。,B,"错误
正确
",4
1221351510,随着程序功能的不断扩展，实现各个功能的模块也在不断增多，需要把这些模块、数据、用户交互界面等模块组织起来，构建成一个完整的应用程序，这个过程称为（ ）。,,软件集成,3
1221343495,构造快速原型的步骤包括（ ）。,ABD,"修改和完善原型
功能选择
提交原型
构造原型
",2
1221355867,根据是否运行待测程序，软件测试分为动态测试和（ ）。,,静态测试,3
1221332716,采用正式审查时要注意（ ）,ABCDE,"发现重大缺陷，改正后会议需要重开
检查要点是缺陷检查表，根据不同的项目，该表要不断积累和完善
发现问题适当记录，避免现场讨论和修改
以会议形式审查，要制定会议目标、流程和规则，结束后要编写报告
按缺陷检查表逐项检查，避免漫无目标地检查
",2
1221348479,菜单的设计可以是（ ）的方式，即从抽象的主菜单根逐步具体到子菜单，直至原子功能；也可以是自底向上的方式，把具体的功能逐步抽象、分组成子菜单，直至主菜单。,,自顶向下,3
1221348480,交互界面是人和计算机进行信息交换的（ ）。,,通道,3
1221337497,如果集成模块从根部的控制模块开始，以控制层次的顺序，逐次增加模块，直至形成整个程 序的增式集成方式，称为（ ）集成。,,自顶向下,3
1221351507,和动态测试相比，静态测试的主要作用包括（ ）,ABCDE,"保证软件开发过程的规范性
发现程序在功能、逻辑构造方面的错误
验证实现的程序在需求和设计方面符合用户的要求
确认程序符合预先定义的开发规范和标准
有助于程序员之间相互学习
",2
1221760934,代码重构就是在不改变软件外部行为的前提下改善它的内部（）。,B,"数据
结构
性能
算法
",1
1221745918,代码重构是增量迭代开发不可或缺的技术，它在完成构造、交付代码前改进代码质量。从中可以看出，代码重构的目的是（）。,A,"提高软件的可维护性
提高软件的运行效率
提高软件的存储效率
提高软件的正确性
",1
1221770902,UML的时序图主要用作（）。,C,"分析软件的正确性
表示软件的组成结构
表示软件组成的交互
分析软件能否重构
",1
1221779916,重构的“移除临时变量”或“分解临时变量”策略，不涉及（）。,C,"临时变量
引用变量
全局变量
局部变量
",1
1221752943,根据使用软件的不同用途，软件环境有多种划分，但是通常不包括（）。,D,"测试环境
运行环境
开发环境
安装环境
",1
1221753931,构建工具Ant可以完成若干项代码构建的活动，有关Ant的描述不正确的是（）。,B,"Ant是用Java语言编写的
Ant不像make、不能用在Linux上
Ant由一系列任务组成
Ant的构建规则使用XML
",1
1221765917,在实际的软件开发中，应该遵循敏捷开发的思想，交替执行代码的构造、测试和（），交出高质量的代码。,A,"重构
交付
构建
集成
",1
1221738499,在本课程的TDD案例中，使用了回归测试、边界值测试和（）等测试技术。,D,"逻辑测试
语句测试
路径测试
等价类测试
",1
1221818000,代码重构的案例中，出现了4个类：Book、NewBook、Reference和TextBook，其中（）不能产生对象实例。,C,"Reference
TextBook
Book
NewBook
",1
1221808020,代码重构案例的最后，抽象类Book的方法中，没设计成抽象方法的是（）。,B,"baseBonus()
getPrice()
baseFine()  
 getFine()
",1
1221745932,从课本使用的UML时序图中可以看出，一个时序图的组成成分包括（ ）。,ABD,"控制焦点
对象
消息
方法
类
",2
1221753941,代码重构的主要时机有：（）。,BCD,"修改错误
添加功能
定位错误
评审代码
测试代码
",2
1221776928,按照软件开发过程，软件测试可以划分不同的阶段或层次，通常包括（ ）。,ACD,"  集成测试
回归测试
单元测试
 验收测试
系统测试
",2
1221775177,Ant将项目的构建工作分解为（）不同的层次。,ABD,"工程
任务
 编译
目标
测试
",2
1221817030,代码重构案例的最后，抽象类Book的方法中，是抽象方法的有（）。,ACD,"baseFine()
getTitle()
getFine()
baseBonus()
getPrice() 
",2
1221765045,当一个类具有太多的行为或者一个方法的实现有多个类参与、耦合性较大时，应该把方法从一个类移到使用了更多特性的另一个类中。,B,"错误
正确
",4
1221779920,重构代码前要谨慎计划，避免多次使用一种重构技术。,A,"错误
正确
",4
1221743308,面向对象语言重构分支语句时，“用多态取代类型码”的基础是实现“用子类取代类型码”。 ,B,"正确
错误
",4
1221745928,重构主要的用意是提高代码的可读性或改变代码内部结构与设计，使其更容易维护。 ,A,"正确
错误
",4
1221744982,虚拟机技术为每个应用程序创建一个运行的容器，把应用程序与计算平台隔离开，便于实现应用的跨平台运行。 ,B,"错误
正确
",4
1221768914,Java档案文件jar是一种压缩文件，可以用WinRAR打开，却不能被WinZip打开。,A,"错误
正确
",4
1221804003,重构是改善现有代码质量的一种技术手段，每一个程序的重构都有特定的重构顺序。,A,"错误
正确
",4
1221814004,代码重构案例的最后，抽象类Book有具体方法也有抽象方法，所以，Java的抽象类可以有具体方法。,A,"正确
错误
",4
1221815014,Ant是一个跨平台的Java库和命令行工具，执行Ant构建时，Ant会记录和分析任务的依赖关系，所以，如果代码没做任何变动，以后每次执行Ant的时间几乎是恒定不变的。,B,"错误
正确
",4
1221786286,Ant和Junit一样，都可以内置在Eclipse，方便开发者使用。,B,"错误
正确
",4
1221767912, （）重构和常规重构的区别是：前者是重写一个系统，后者是重写一段代码。,,大型,3
1221757009,软件（）的作用是让最终用户使用开发的软件，通常是软件开发和软件维护这两个阶段之间的活动统称。,,交付,3
1221758066,使用“以查询取代临时变量”时要注意提炼的函数没有（），即它只是单纯的计算，没有改变任何对象、任何非局部变量的值。,,副作用,3
1221780916,课程TDD的案例中，用分支语句实现了0～9的单个阿拉伯数字转换成中文大写数字。为了在2位及以上的数值中方便地使用这段代码，可以采用（）函数的重构策略。,,提炼##%_YZPRLFH_%##提取,3
1221795425,代码重构例子中的方法calculateFineAndBonus从名称上也可以看出是完成了两个功能：计算罚金和计算奖励积分，说明该代码实现了过多的功能，显示出该方法松散的（）。,,内聚性​,3
1221755931,UML时序图中的（）表示一时间段内对象将执行相应的操作。,D,"生存周期
时间顺序
有向连线
控制焦点
",1
1221749934,本章重构案例中，起初计算罚金的方法放在了借阅者Student类中，但计算罚金是“借阅”对象的责任，所需要的信息都在“借阅”对象中，这种情况最好使用（）的重构策略。,B,"函数下移
函数移动
函数提炼
函数上移
",1
1221757003,本章重构案例中，方法calculateFineAndBonus从名称上也可以看出是完成了两个功能：计算罚金、计算奖励积分，这种情况最好使用（）的重构策略。,C,"函数下移
函数提炼
函数更名
函数上移
",1
1221804001,代码重构的例子中，罚金的计算与书籍借阅的时间及书籍的信息密切相关，这些信息主要在类Rental中，而不在Student内，所以应该把罚金计算的方法放到类Rental中，采用的重构是（）。,A,"函数移动
函数提炼
函数分离
函数下移
",1
1221828019, 测试驱动开发TDD的活动是（）的微循环。,A,"编写测试-编写通过测试的代码-重构代码
编写代码-修改错误-测试运行
设计代码-编写通过测试的代码-重构代码
编写代码-测试运行-调试代码
",1
1221785025,测试驱动开发TDD与传统软件开发的活动大多数相似的，主要差异是（）。,C,"测试
编码
重构
调试
",1
1221769938,“提炼方法”的步骤包括（）。,ABCDE,"把原来方法中要提炼出的代码直接复制到新的方法中（目标方法）
在源方法中调用目标方法，取代提炼的代码
检查目标方法中的局部变量、引用变量和临时变量，做出相应修改
通过编译和测试
设计一个新方法并且命名
",2
1221738948,软件环境可以分为（ ）。,ABC," 运行环境
 开发环境 
测试环境
组装环境
调试环境
",2
1221772943,程序打包就是创建计算机程序的安装，即把（）等组装成一个可以自行解压的压缩文件，允许软件文件在多个计算机上安装运行。,ABC,"编译的文件
配置文件
使用的函数库
测试代码
测试数据
",2
1221738500,如果一个方法的代码太长或者代码需要很多注释才能理解其意图，可通过“函数提炼”用一个能说明其意图的方法替换那些代码。,A,"正确
错误
",4
1221746979,面向对象语言重构分支语句时，如果类型码不影响程序的行为，则最好使用“用类替换类型码”的策略。,A,"正确
错误
",4
1221776922,设计良好的面向对象程序中，应该很少出现根据类型码决定行为的分支语句或if-then-else语句。,B,"错误
正确
",4
1221778908,测试驱动开发的基本思想是，在编写某个功能的代码前先编写测试代码，然后只编写使测试通过的功能代码，通过测试来推动整个软件的开发。,A,"正确
错误
",4
1221779926,测试驱动开发中，测试是消除模棱两可的需求、保证代码质量的技术手段。 ,A,"正确
错误
",4
1221739949,Eclipse中基本配置包含重构功能选项的英文是（）.,,Refactory##%_YZPRLFH_%##refactory,3
1221743953,当一个类具有太多的行为或者一个方法的实现有多个类参与、耦合性较大时，应该把该方法在使用了更多特性的另一个类中实现，这种重构策略称作函数（）。,,移动,3
1221768918,重构代码可以在结构层或语意层，不同的重构手段可能是结构的调整或语意的转换，但前提是不影响代码在转换前后的（）。,,行为##%_YZPRLFH_%##功能,3
1221765041,对完成了增量集成与重构的代码要进行综合测试，这通常不包括（）。,A,"系统测试
功能确认测试
回归测试
单元测试
",1
1221743944,通常情况下，软件交付的基本活动不包括（）。,D,"构建
部署
打包
测试
",1
1221785020,记录结构或C语言的结构体是面向对象语言出现之前的一种常用的基本数据结构，现在仍有各种原因在面向对象程序中引入记录，可以设计一个类作为接口来处理这些外部元素。这种重构技术称为（）。,D,"以查询取代临时变量
封装集合
移除临时变量
以数据类取代记录
",1
1221739951,处理分支语句的多个条件时通常采用类型吗，重构分支语句就是要消除类型吗，基本技术包括（）。,ABCD,"用类替换类型码
用状态取代类型码
用策略模式取代类型码
用多态取代类型码
用对象取代类型码
",2
1221780919,通过学习重构技术，可以发现面向对象代码具有的特点包括（）。,CDE,"功能单一的代码不易复用
类之间的耦合紧密
方法的代码短小
一个功能通过对象之间的协同完成
复杂功能分解到若干方法
",2
1221770910,使用“以查询取代临时变量”时，代码中被删除的临时变量可以多次赋值。,B,"正确
错误
",4
1221754944,面向对象语言重构分支语句时，如果类型码影响程序的行为，最好使用多态来处理多变的行为。,B,"错误
正确
",4
1221780913,本课程的TDD案例用多轮实现了将阿拉伯数字转换为中文大写的程序，其中第2轮，实际上是构造[10..99]范围的数字转换。,A,"正确
错误
",4
1221758948,开发的Java程序有两种基本的应用方式：供其他开发者复用的代码，独立于开发环境的可运行程序。,A,"正确
错误
",4
1221787028,代码重构例子中的方法calculateFineAndBonus的名称上可以看出它完成了两个功能：计算罚金和计算奖励积分，说明该代码实现了不止一个功能，显示出方法松散的耦合性。,A,"错误
正确
",4
1221830031,代码重构案例的最后，抽象类Book有具体方法也有抽象方法，所以，Java的抽象类必须有具体方法。,A,"错误
正确
",4
1221772940,（）测试由用户主导，参与者包括软件的所有相关人员，如最终用户、开发人员、质保人员、第三方测试人员等。,,验收,3
1221780914,（）测试的重点是检测软件是否满足了用户需求、完成既定的功能和任务，包括检测软件的运行速度、存储占用、事务处理、数据量及是否稳定、可靠、安全、易用、易维护等非功能需求。,,系统,3
1221751944,（）是UML中描述对象之间通讯的一种动态交互图。,,时序图,3
1221746984,现在的IDE通过可视化完成软件的资源配置、路径设置、外部库引入等代码的管理以及代码的编译和链接，简化了（）活动。,,构建##%_YZPRLFH_%##build,3
1221765038,本章重构案例中，方法returnedMessage中的临时变量finedAmount只被使用了一次，而且它的值是通过函数调用或表达式计算得到的，这种情况最好使用（）的重构策略。,D,"换名临时变量
移除临时变量
分解临时变量
以查询取代临时变量
",1
1221758940,分支语句的出现是对多种复杂情况的处理，本课程对分支语句提出的重构技术不包含（）。,D,"用状态式取代类型码
用多态取代类型码
用类替换类型码
用接口替换类型码
",1
1221741938,虚拟机不是实际的计算机硬件而是为应用软件提供运行环境的中间件软件，通常不包括（）。,C,"Dalvik VM
CLR
IDE
 JRE
",1
1221779930, Ant（Another neat tool）是一个跨平台的Java库和命令行工具，与make类似，用编写的脚本执行（ ）的构建任务。,ABE,"测试
编译 
 调试
运行
汇编 
",2
1221814002,代码重构案例的最后，抽象类Book的方法中，不是抽象方法的有（）。,AD,"getPrice()
getFine()
baseFine()  
getTitle()
baseBonus()
",2
1221779924,通常，代码重构不修改代码中的错误，但是可以增加新的功能。  ,B,"正确
错误
",4
1221775934,代码重构后，原先复杂的功能划分到若干相互独立的、短小的方法中。,B,"正确
错误
",4
1221800974,TDD是通过测试软件、去除模棱两可的需求、保证代码质量的技术手段。,A,"错误
正确
",4
1221739950,本课程的案例中，对包含若干算式的习题类，我们采用了（ ）的设计策略，将存放算式的ArrayList声明为类Exercise的私有成员，为其定义了所需要的访问、增减、查询、遍历等操作。,,封装集合,3
1221763933,运用重构“提炼方法”时，会对局部变量、引用变量和临时变量做出相应修改，可以运用“移除临时变量”或“（）临时变量”的策略。,,分解,3
1221773948,Ant的build文件是一个标准的XML文件，它包含一个根节点Project。每个Project定义了一个或多个Target，每个Target又是一系列（）。,,Task##%_YZPRLFH_%##任务,3
1221760953,软件交付的基本活动包括（ ）。,ABCD,"构建
 打包  
发布
安装
测试
",2
1221763923,使用“以查询取代临时变量”时要注意提炼的函数没有副作用，即它计算，有改变任何对象、任何非局部变量的值。 ,B,"正确
错误
",4
1221738508, （）、云技术、DevOps是信息技术发展的结果，对软件交付与使用模式产生了影响。,,持续交付,3
1221736972,在本课程的TDD案例中，使用的几种测试技术有（）。,AD,"边界值测试 
 回归测试
异常测试
等价类测试
逻辑测试 
",2
1221773946,系统测试的重点是检测程序模块的接口、模块之间的交互及开发的软件与外部系统的交互。,A,"错误
正确
",4
1221738505,本课程的TDD案例用多轮实现了将阿拉伯数字转换为中文大写的程序，其中第3轮，编码后测试时使用了测试数据100、101和999，采用的是等价类测试。,B,"正确
错误
",4
1221830020,“测试驱动开发”（Test-Driven Development，TDD）或“测试先行开发”，是一种不同于传统软件测试的新型方法。,A,"错误
正确
",4
1221769933,代码（）是增量迭代开发不可或缺的技术，已经成为现代软件开发的基本技术，并在很多常用的 IDE 中成为标准模块。,,重构,3
1221751948,对分支语句重构的一种策略是“用（）取代类型码”，它的基本思路是把原先的方法设计成抽象方法，在子类中重载每个分支条件。,,多态,3
1221813996,关于测试，下面说法正确的有（）。,ABDE,"系统测试可以由专职的测试人员完成
集成测试主要由参与集成单元模块开发的人员完成
单元测试可以由专职的测试人员完成
集成测试可以由专职的测试人员完成
验收测试组可以包括最终用户
",2
1221766921,在实际的软件开发中，应该遵循敏捷开发的思想，交替执行代码的（），交出高质量的代码。,ACD,"构造
 构建 
测试
重构 
",2
1221791028,JUnit是Eclipse的内置测试工具，但是Ant不同，只能作为构建工具在操作系统的平台上使用。,B,"正确
错误
",4
1221749938,运用“提炼方法”抽取代码时，要使用良好的编码风格设计方法名和参数， 允许读者在较高的函数级别理解程序，提高程序的（）性。,,阅读##%_YZPRLFH_%##可维护,3
1221766919,一般而言，应用程序不是在一个计算机裸机上运行的，而是在包含计算机操作系统、应用程序、配置文件等的（）上运行。,,软件环境,3
1221772942,造成重构的主要原因包括（ ）。,ABD,"改进软件设计
使软件更易理解
更改软件错误
有助于查找错误
提升软件性能
",2
1221800973,代码重构的例子中，罚金的计算与书籍借阅的时间及书籍的信息密切相关，这些信息主要在类Rental中，而不在Student内，所以应该把罚金计算的方法放到类Rental中，采用的重构是函数（）。,,移动,3
1221749007,面向对象语言重构分支语句时，用多态取代类型码的基本思路是把原先的方法设计成（）方法，在子类中重载每个分支条件。,,抽象,3
1221788853,( )是长期存储在计算机内、有组织、可共享的大量数据的集合。,A,"数据库
数据仓库
数据库管理系统
数据库系统
",1
1221808851,将数据库、DBMS、应用程序及( )构成的系统称为数据库系统。,D,"数据库使用者
数据库管理系统
操作系统
数据库管理员
",1
1221825843,按照数据模型的三个要素，关系模型由( )、关系操作集合和关系完整性约束三部分组成。,D,"关系
关系操作集合 
关系数据对象
关系数据结构
",1
1221812843,在数据库中，域是一组具有(B)的值的集合。,D,"相同数据存放地址
相同数据
相同数据结构
相同数据类型
",1
1221818848,( )指明了关系与关系之间存在着相互引用，相互约束的情况。,A,"外码
主码
组合主码
候选码
",1
1221813842,SQL语言由( )、数据操纵语言、完整性约束三部分组成。,C,"数据删除语言
数据查询语言
数据定义语言
数据创建语言
",1
1221816865,SQL操作对象是( )的集合。,B,"字段
元组
关系
属性
",1
1221792855,数据模型的三要素不包括下列哪项（ ）。,C,"操作集合
数据结构
数据对象
完整性约束
",1
1221807862,在 E-R 图中，菱形框内写()。,D,"联系类型
实体属性
实体名
联系名
",1
1221784851,在 E-R 图中，椭圆内写明（）。,D,"联系类型
实体名
联系名
实体属性
",1
1221826859,按照数据模型的三个要素，关系模型由()组成。,BDE,"E-R图
关系操作集合
关系数据对象
关系完整性约束
关系数据结构
",2
1221803847,实体型之间的联系类型可以分为(ABC)。,BCD,"一对对0联系
一对一联系
多对多联系
一对多联系
",2
1221826860,SQL语言由( )组成。,ABC,"完整性约束
数据定义语言
数据操纵语言
关系操作集合
数据查询语言
",2
1221799844,数据定义语言提供( )的命令。,BCD,"更新模式
定义模式
修改模式
删除关系
增加模式
",2
1221796873,数据库系统的开发包含了若干基本步骤，本课程把这些步骤组合成6个阶段，其中逻辑结构设计阶段包含了（ ）基本步骤。,BD,"设计物理结构
设计逻辑结构
设计概念结构
数据模型优化
设计评价
",2
1221815858,数据库是长期存储在计算机内、有组织、可共享的大量数据的集合。,A,"正确
错误
",4
1221804847,按照数据模型的三个要素，关系模型由关系数据结构、关系操定义语言和关系完整性约束三部分组成。,A,"错误
正确
",4
1221794839,SQL采用的是关系的运算方式。,B,"正确
错误
",4
1221806856,外模式是数据库用户能够看见和使用的局部数据的逻辑结构和特征的描述。,A,"正确
错误
",4
1221815859,SQL语言由数据定义语言、关系数据结构、完整性约束三部分组成。,B,"正确
错误
",4
1221816869,关系模型中有三类完整性约束：实体完整性、操作完整性和用户自定义完整性。,B,"正确
错误
",4
1221815862,DBMS的全称为数据库系统。,B,"正确
错误
",4
1221792858,关系模式和关系都是动态的，随着时间和操作不断更新变化。,A,"错误
正确
",4
1221802869,在建表的同时，还可以定义与该表有关的完整性约束条件，并被存入系统的数据字典中。,B,"错误
正确
",4
1221786151,SQL的DELETE语句删除表中的数据的同时也删除基本表。,B,"正确
错误
",4
1221789851,_____是数据库应用程序的基本逻辑单元，是用户定义的一个数据库的操作序列，是一个不可分割的基本单位。,,事务,3
1221815853,实体型之间的联系类型可以分为一对一联系、______和多对多联系三种。,,一对多联系,3
1221789855,______是持久存储在计算机内、有组织、可共享的大量数据的集合。,,数据库,3
1221807858,_______是位于用户（含应用程序）和操作系统之间的一种数据管理软件，负责 数据的组织、存储和管理。,,数据库管理系统##%_YZPRLFH_%##DBMS,3
1221790869,可以把SQL嵌入在高级程序设计语言中使用，称为嵌入式SQL。这些高级语言可以是C、Java、C#、Python等，称为（ ）。,,宿主语言,3
1221826855,若关系中的某一属性组的值能唯一地标识一个元组，则称该属性组为( )。,B,"外键
候选码
主属性
主键
",1
1221827852,"候选码的属性称为主属性,不包含在任何候选码中的属性称为( )。",D,"外键
次要属性
都不是
非主属性
",1
1221813840,关系模型中有三类完整性约束：实体完整性、参照完整性和( )。,A,"用户自定义完整性
数据描述完整性
数据完整性
数据结构完整性
",1
1221792854,( )是数据库中全体数据的逻辑结构和特征的描述。,A,"模式
外模式
都不对
内模式
",1
1221804853,WHERE子句与HAVING子句相似而又有所不同，下面描述正确的是：（ ）。,CD,"WHERE可以使用聚合表达式 
以上都不正确
HAVING短语可以使用聚合表达式
WHERE子句不能使用聚合函数作为条件表达式
HAVING子句不能使用聚合函数作为条件表达式
",2
1221827871,SQL主要解决的三个问题就是关系数据模型的三个要素，即（ ）。,ADE,"视图定义
数据查询
模式定义
事务控制
访问权限
",2
1221811879,"SELECT语句的功能是查询数据库中存储的数据,关于SELECT正确的表述有（）。",ABCDE,"表达想从哪里查询
可以将查询结果分组
可以对查询结果排列
只需表达想要查询什么内容
表达查询的条件是什么
",2
1221800859,将数据库、DBMS、应用程序及数据库管理员构成的系统称为数据库系统。,B,"错误
正确
",4
1221801853,数据库管理系统是位于用户（含应用程序）和操作系统之间的一种数据管理软件，负责数据的组织、存储和管理。,B,"错误
正确
",4
1221828847,SQL操作对象是元组的集合。,A,"正确
错误
",4
1221794841,模式是数据库中全体数据的逻辑结构和特征的描述。,A,"正确
错误
",4
1221784852,SQL是集数据定义语言 DDL、数据操纵语言 DML 和数据控制语言 DCL 功能于一体的查 询语言。,A,"正确
错误
",4
1221786133,内模式，也称为存储模式，一个数据库可以有多个内模式。,A,"错误
正确
",4
1221791852,事务的隔离级别越高，越应该小心避免并发的冲突。,A,"正确
错误
",4
1221796871,C、Java、Python等通用的高级程序设计语言可以通过嵌入的SQL语句而创建、访问和操作数据库。,B,"错误
正确
",4
1221794837,查询不仅仅是针对一个表进行的，如果同时涉及两个以上的基本表则称为_______。,,多关系查询,3
1221808850,SQL操作对象是_____的集合。,,元组,3
1221829852,SQL语言由________、数据操纵语言、完整性约束三部分组成。,,数据定义语言,3
1221796846,关系模型中有三类完整性约束：________、参照完整性和用户自定义完整性。,,实体完整性,3
1221790850,按照数据模型的三个要素，关系模型由_______、关系操作集合和关系完整性约束三部分组成。,,关系数据结构,3
1221795851,关系模型中有三类完整性约束：实体完整性、( )和用户自定义完整性。,A,"参照完整性
数据结构完整性
数据完整性
数据描述完整性
",1
1221826856,在 E-R 图中，矩形内写明（ ）。,D,"关系类型
实体属性
关系名
实体名
",1
1221828846,Java操作数据库的基本步骤，正确的是（）。,D,"实现JDBC连接，编写连接数据库JDBC驱动程序，创建Statement并执行SQL，关闭连接。
实现JDBC连接，创建Statement并执行SQL，编写连接数据库JDBC驱动程序，关闭连接。
编写连接数据库JDBC驱动程序，创建Statement并执行SQL，实现JDBC连接，关闭连接。
 编写连接数据库JDBC驱动程序，实现JDBC连接，创建Statement并执行SQL，关闭连接。
",1
1221808861,关系模型中的完整性约束包含了(ADE)。,CDE,"数据完整性
数据描述完整性 
用户自定义完整性
实体完整性
参照完整性
",2
1221794847,数据库领域中最常见的数据模型有：（）。,ABCD,"面向对象模型
层次模型
关系模型
网状模型
语义模型
",2
1221801854,SQL采用的是集合的运算方式。,B,"错误
正确
",4
1221817850,SQL操作对象是属性的集合。,A,"错误
正确
",4
1221802868,存储文件的物理结构对用户是透明的，可以由用户来定义。,B,"错误
正确
",4
1221795870,SQL语言同C、Java、Python类似，属于过程化语言，必须说明查询的步骤才能得到结果。,A,"错误
正确
",4
1221801850,用户可以使用 ORDER BY 子句对查询结果按照一个或多个属性列的值排列，默认 值为（）。,D,"随机排列
降序
都不对
升序
",1
1221796868,下列哪些动词术语属于SQL的数据操纵语言（ ）。,ABD,"INSERT
DELETE
GRANT
UPDATE
CREATE
",2
1221829873,SQL的数据操纵语言（Data Manipulation Language，DML）对已经定义的数据进行（）。,ABDE,"查询
增加
定义
删除
修改
",2
1221812844,主码指明了关系与关系之间存在着相互引用，相互约束的情况。,BD,"正确
错误
正确
错误
",4
1221801855,事务是数据库应用程序的基本逻辑单元，是用户定义的一个数据库的操作序列，是一个可继续分割的基本单位。,B,"正确
错误
",4
1221818846,_____是数据库中全体数据的逻辑结构和特征的描述。,,模式,3
1221821848,若关系中的某一属性组的值能唯一地标识一个元组，则称该属性组为_______。,,候选码,3
1221802862,域是一组具有_______的值的集合。,,相同数据类型,3
1221783854,将数据库、DBMS、应用程序及数据库管理员构成的系统称为________。,,数据库系统,3
1221801860,关系数据库的三级模式分为( )。,ACD,"设计模式
内模式
模式
外模式
",2
1221795855,数据库中，域是一组具有相同数据结构的值的集合。,B,"正确
错误
",4
1221827854,外模式是数据物理结构和存储方式的描述。,B,"正确
错误
",4
1221799838,数据库在物理设备上的存储结构和存取方法称为数据库的_____结构。,,物理,3
1221795860,在多关系查询中，和连接查询等价的另一种查询方式是嵌套查询，下列说法正确的是（）。,AB,"SELECT语句中不能使用ORDER BY子句
ORDER BY只能对最终查询结果排序
SELECT能使用ORDER BY子句
ORDER BY可以在子查询中查询结果排序
",2
1221787871,数据库系统是个复杂的计算机系统，测试的种类很多，包括功能测试、（）等。,ABCDE,"兼容性测试
性能测试
可用性测试
安全测试
可靠性测试
",2
1221824854,数据库在物理设备上的存储结构和存取方法称为数据库的基本结构。,B,"正确
错误
",4
1221826853,SQL采用的是_____的运算方式。,,集合,3
1221804839,______是数据库用户能够看见和使用的局部数据的逻辑结构和特征的描述。,,外模式,3
1221790859,将( )、及数据库管理员构成的系统称为数据库系统。,BDE,"操作系统
应用程序
数据仓库
DBMS
数据库 
",2
1221825849,在JDBC中批量执行SQL语句的加大了应用程序和DBMS之间的通信，从而降低了执行速度。,A,"错误
正确
",4
1221798847,_____是数据物理结构和存储方式的描述。,,内模式,3
1221824879,SQL面向集合数据，一条SQL语句可以产生或处理多条记录。有时需要在结果集中前后移动、显示结果集中的某条记录或随机显示若干记录等，为此引入了（）的概念。,,游标,3
1221801845,_____是在数据库系统中，一组为了完成特定功能的SQL语句集，保存在数据库中，经过第一次编译之后再次调用时不需要再次编译，,,存储过程,3
1221824849,_____指明了关系与关系之间存在着相互引用，相互约束的情况。,,外码,3
1221789853,"候选码的属性称为主属性,不包含在任何候选码中的属性称为________。",,非主属性,3
1226062825,瀑布式软件开发过程把软件开发分为制定计划、需求分析、软件设计、程序编写、（      ）和运行维护等6 个基本活动，并且规定了它们自上而下、相互衔接的固定次序，如同瀑布流水，逐级下落。,D,"设计者评价
用户评价
项目经理评价
软件测试
",1
1235138446,最佳实践中的（）是获得一个客体（对象）的步骤或过程。作为一个系统的步骤、技术活动被特定的专业或艺术采纳，是技能或技术的全部。,C,"原则
 机制
方法
 技术
",1
1226062843,软件维护分为4种类型：（      ）,ABCD,"适应性维护
改正性维护
预防性维护
完善性维护
可用性维护
",2
1226062846,敏捷开发4个核心价值观:（    ）,ABCE,"客户合作胜过合同谈判
工作的软件胜过详尽的文档
个体和互动胜过流程和工具
用最快的速度开发以满足客户需求
响应变化胜过遵循计划
",2
1226062801,根据软件生存周期的概念和划分，软件测试不属于实现阶段的活动。,B,"正确
错误
",4
1235074883,从软件开发者的角度，一般把软件生存周期分为提出需求、开发软件和维护软件三个阶段。,B,"正确
错误
",4
1235115942,从用户的角度，软件生存周期分为定义软件、 获取软件、使用软件三个阶段，,A,"错误
正确
",4
1226004775,_________开发过程，也叫软件生存期模型。它按照软件生命周期，把开发分为制定计划、需求分析、软件设计、程序编写、软件测试和运行维护等6个基本活动，并且规定了它们自上而下、相互衔接的固定次序。,,瀑布,3
1226004786,代码重构指的是改变程序的_______而不改变其行为，以便提高代码的可读性、易修改性等。,,结构,3
1234771717,软件实现与通常的程序设计的主要区别是软件的______与测试。,,集成,3
1234873406,按照教材的说法 ，敏捷开发创造了一些新的技术或实践，如测试驱动开发等，但不包括（）。,A,"软件体系结构
结对编程
持续集成
代码重构
",1
1235141841,最佳实践中的（）指的是有机体的构造、功能及其相互关系、工作原理，如可视化编程的事件响应、类型的多态。,D,"原则
方法
技术 
  机制
",1
1235169273,根据软件构造的含义，软件构造就是通过设计、编码、测试等一系列活动创建软件，没有特别指出（）。,D,"可运行的
可工作的
有意的
高质量的
",1
1234786243,软件开发可以理解为是做（）的过程。,ABD,"选择
决策
协商
权衡
维护
",2
1235256956,软件规模的划分依据有多个因素，通常不包含（）。,AB," 组织方式
运行平台
研发周期
产品规模
参加人数
",2
1226062807,软件构造是软件开发的中心活动。,B,"错误
正确
",4
1226004778,软件按其工作方式划分为：________软件、分时软件、交互式软件和批处理软件。,,实时,3
1226004781,软件实现与通常的程序设计的主要区别是软件的集成与________。,,测试,3
1226004789,操作系统将计算机的硬件细节屏蔽，将计算机抽象成______资源。,,虚拟,3
1234765415,图灵奖获得者沃斯（Niclaus Wirth）提出的“程序=__________+数据结构”是程序设计的精辟观点。 ,,算法,3
1235005805,软件开发一直缺乏坚实的理论基础，所以软件行业借用了管理学的______的概念来概括到达用户满意的、可以反复使用的软件开发的一切手段，包括技术、方法、过程、活动或机制，可以使生产或管理的结果达到最优，并减少出错的可能性。,,最佳实践##%_YZPRLFH_%##Best Practice,3
1251285841,Java程序中main()函数的值是什么?,CF,"char
String
void
int
char
void
String
int
",1
1235015554,从用户的角度，软件生存周期分为（）三个阶段。,ADE,"使用软件
定义软件
开发软件
获取软件
提出需求
",2
1235207261,按照SWEBOK 3.0指南，软件构造知识域的子域——构造技术，包含了（）等。,ABD,"防御性编程
按契约设计
设计模式
测试先行编程
",2
1226004797,软件维护分为只有3种类型：改正性维护、适应性维护和完善性维护。,A,"错误
正确
",4
1226062806,如何考虑构造，既构造的主要工作是什么，在某种程度上依赖于采用的生存周期模型。,A,"正确
错误
",4
1235111967,从软件开发者的角度，一般把软件生存周期分为定义软件、获取软件和维护软件三个阶段。,B,"正确
错误
",4
1235093784,本课程对案例开发过程中的每个需求和问题都提出并分析几个典型的候选设计，然后给出一两个具体的实现。所以，对案例的软件构造也就是几个。,B,"正确
错误
",4
1234829236,根据IEEE计算机学会发布的软件工程知识体系（SWEBOK 3.0）指南，软件工程学科的实践知识域中有______，指的是通过编码、验证、单元测试、集成测试和调试的组合，详细地创建可工作的、有意义的软件。 ,,软件构造,3
1234974811,高级程序语言的一种划分标准是按照语言的计算模型，将高级语言分为_______式和命令式两个大类，前者进一步划分为函数式语言、逻辑式语言和数据流语言。,,声明,3
1226062847,IDE的特点是（    ）。,ABE,"自动化
集成化
简洁化
多功能化
可视化
",2
1226004788,软件运行环境，广义上说，是一个软件运行所要求的各种条件，包括_______环境和硬件环境。,,软件,3
1251411064,"下列Java语句序列执行后，k 的值是_____。  int  i=4,j=5,k=9,m=5;    if(i>j||m<k)  k++;  else k--; ",,10,3
1234825320,本书使用的“软件构造”指的是运用软件最佳实践，通过（）迭代过程，增量地建造出可运行软件。,ACD,"测试
调试
设计
编码
分析
",2
1234816116,按照教材，敏捷开发创造了一些新的技术或实践，主要包含（）。,ABCD,"测试驱动开发
结对编程
面向对象技术
代码重构
设计模式
",2
1234992266,高级程序语言的一种划分标准是按照语言的计算模型，将高级语言分为声明式式和命令式两个大类，前者进一步划分为（）。,ABD,"函数式语言
数据流语言
面向对象语言
逻辑式语言
领域语言
",2
1226004792,“软件=程序+数据”，其中程序是软件的中枢和骨架。,B,"正确
错误
",4
1226004782,________维护是为适应环境的变化而进行的软件修改活动。,,适应性,3
1226004787,在所有的软件开发中，________是软件开发的中心活动。,,构造,3
1226062829,根据IEEE，“软件构造”指的是通过（      ）、验证、单元测试、集成测试和调试的组合，详细地创建可工作的、有意义的软件。,D,"总体设计
获取需求
详细设计
编码
",1
1235055909,从软件开发者的角度，一般把软件生存周期分为（）三个阶段。,ABD,"定义软件
开发软件
提出需求
维护软件
",2
1235206457,按照语言的转换和执行方式，高级语言分为编译型语言和解释型语言。Java、C#等是不是典型的编译型语言或解释型语言，而是_____型语言，即把程序编译成特定的中间语言，然后由相应的虚拟机作为解释器去执行。,,混合,3
1251465595,在Java语言中，下列数据类型的精度由高到低的顺序是()。,D,"double，int，float，long
float，double，int，long
byte，long，double，float
double，float，int，byte
",1
1226004783,在瀑布式开发模型中，软件开发的各项活动严格按照________方式进行。,,线性,3
1226004771,图灵奖获得者沃斯（Niclaus Wirth）提出的“程序=算法+________”是程序设计的精辟观点。,,数据结构,3
1234929185,软件开发工具的一个发展趋势是使用可视化的______，用图形用户界面用GUI集成了代码编写、静态分析、编译、调试、连接、打包等功能的一体化软件开发套件。,,IDE##%_YZPRLFH_%##集成开发环境,3
1226062850,在软件构造中，分解的核心是（）。,C,"将问题分解的足够简单解决
将问题分解的尽可能小
将多个问题、难点或关注点分离
将分解的若干小问题最终合并
",1
1226062860,根据软件的模块化理论，下列内聚最强的是（）。,D,"顺序内聚
通信内聚
过程内聚
功能内聚
",1
1226062865,根据软件的模块化理论，一组函数都访问同一个（）叫做公共耦合。,C,"全局简单变量
通信区
公共数据环境
内存地址
",1
1226062868,根据软件的模块化理论，若一组函数通过参数表传递记录信息，这样的耦合称为（）。,C,"外部耦合
控制耦合
标记耦合
非直接耦合
",1
1226062871,ISO为程序质量定义了6个独立的质量特性，它们是：①功能性，②可靠性，③（），④效率，⑤，可维护性和⑥可移植性。,C,"可测试性
可读性
可用性
简洁性
",1
1226062873,依据编码风格，命名标识符的首要原则是（）。,C,"简单
正确
要完全准确地表达所代表的事物或动作
使用驼峰命名法或匈牙利命名法
",1
1226062963,根据模块化理论，()是两函数之间没有直接关系，之间的联系完全是通过其他函数的控制和调用来实现的。,A,"非直接耦合
标记耦合
控制耦合
外部耦合
",1
1235540804,"对案例问题代码2.1可以分解成4个部分。（1）增加一个程序头打印函数void printHeader()，比如简单说明本程序的作用和使用。（2）函数void generateEquations()，产生加法或减法算式的符号串并存入一个数组。（3）输出习题的函数void printExercise()，它接收generateEquations的输出，按照要求打印输出所有的算式。（4）输出习题中每个算式的计算结果void printCalculations()。程序的实现方式有很多，下面的代码给出了主程序及部分模块代码。它定义了两个非局部变量，分别是存放算式符号串的数组和每个算式计算结果的数组。public class BinaryOperation_01 {// 存放算术符号串的数组，非局部变量    static String [] exercises = new String[50];// 存放算术题结果的数组，非局部变量      static short [] results = new short[50];          public static void printHeader(){…… }    public static void generateEquations(){            ……            exercises[i]=""""+m+o+n+""="";            results[i]=v;        }    }    public static void printExercise(){        for (int i=0;i< exercises.length; i++){            System.out.println(""""+(i+1)+"":	""+e[i]);        }    }    public static void printCalculations(){        for (int i=0;i< results.length; i++){            System.out.println(""""+(i+1)+"":	""+r[i]);        }    }    public static void main(String[] args) {        printHeader();        generateEquations();        printExercise();        printCalculations();       }}从模块化设计理论分析，函数printExercise和generateEquations出现在主程序中的耦合性，属于（）。",C,"数据耦合
标记耦合
公共耦合
非直接耦合
",1
1235550010,"对案例问题代码2.1可以分解成4个部分。（1）增加一个程序头打印函数void printHeader()，比如简单说明本程序的作用和使用。（2）函数void generateEquations()，产生加法或减法算式的符号串并存入一个数组。（3）输出习题的函数void printExercise()，它接收generateEquations的输出，按照要求打印输出所有的算式。（4）输出习题中每个算式的计算结果void printCalculations()。程序的实现方式有很多，下面的代码给出了主程序及部分模块代码。它定义了两个非局部变量，分别是存放算式符号串的数组和每个算式计算结果的数组。public class BinaryOperation_01 {// 存放算术符号串的数组，非局部变量    static String [] exercises = new String[50];// 存放算术题结果的数组，非局部变量      static short [] results = new short[50];          public static void printHeader(){…… }    public static void generateEquations(){            ……            exercises[i]=""""+m+o+n+""="";            results[i]=v;        }    }    public static void printExercise(){        for (int i=0;i< exercises.length; i++){            System.out.println(""""+(i+1)+"":	""+e[i]);        }    }    public static void printCalculations(){        for (int i=0;i< results.length; i++){            System.out.println(""""+(i+1)+"":	""+r[i]);        }    }    public static void main(String[] args) {        printHeader();        generateEquations();        printExercise();        printCalculations();       }}从模块化设计理论分析，主程序包含函数printExercise()和printCalculations()以便分别输出习题及其结果，主程序作为模块具有的内聚性属于（）。",C,"偶然内聚
顺序内聚
通信内聚
 过程内聚
",1
1235468314,"public class StaticTester extends Base{    static{        System.out.println(""test static"");    }    public StaticTester(){       System.out.println(""test constructor"");    }    public static void main(String[] args) {       new StaticTester();    }}class Base{    static{       System.out.println(""base static"");   }   public Base(){       System.out.println(""base constructor"");   }}运行这个Java程序后，输出结果是（）。",D,"test static test constructorbase staticbase constructor
test staticbase statictest constructorbase constructor
base staticbase constructortest statictest constructor
base statictest staticbase constructortest constructor
",1
1226062882,根据模块化理论，下列属于7种内聚的是（）。,ACD,"逻辑内聚
物理内聚
偶然内聚
过程内聚
数据内聚
",2
1226062885,根据模块化理论，下列按照耦合度从低到高排序正确的是（）。,AC,"非直接耦合 控制耦合 外部耦合 内容耦合
标记耦合 控制耦合 内容耦合 公共耦合
数据耦合 标记耦合 公共耦合 内容耦合
内容耦合 公共耦合 外部耦合 非直接耦合
外部耦合 控制耦合 内容耦合 公共耦合
",2
1235492240,"int add (int m,int n) {    if (m > 100 || m < 0 || n > 100 || n < 0)        return -1;    return m+n;}该程序期望输出两个100以内的正整数之和，和可以超过100。返回-1则表示输入参数不符合要求用边界值分析的方法测试该程序，如果要测试不期望的结果（输入参数不符合要求），要选择哪些测试数据（）。",BDE,"（1,1）
 （0,90）
（99,99)
（1,100）
（90,0）
",2
1235539298,把“算式”设计成一个具有数据结构的量时，我们有几种选择，每种设计都有一些优势和劣势，比如用数组表示一个“算式”时，具有如下优势。,ACD,"节省存储空间
直接显示输出
易编程实现
较易修改
代码可读性高     
",2
1235637101,"import java.util.Random;public class BinaryOperation_02 {         public static void main(String[] args) {        short m=0, n=0,v=0, ov=0;                  char o='+';            Random random = new Random();        for (int i=0;i<50; i++){            ov = (short) random.nextInt(2);       // 随机产生运算符            m = (short)random.nextInt(101);       // 随机产生运算数            if (ov == 1){                do {                   n = (short)random.nextInt(101);                   v = (short) (m + n);                } while (100 < v || v < 0);                           o = '+';            } else {                                   do {                   n = (short)random.nextInt(101);                   v = (short) (m - n);                } while (100 < v || v < 0);                o = '-';            }                       System.out.println(""""+(i+1)+"":	""+m+o+n+""="");        }    }}运行程序，语句“do {…} while (100 < v || v < 0);”循环的次数可能是（）。",ABCE,"21
1
11
0
59
",2
1235656079,"import java.util.Random;public class ExerciseGenerator_t1_1 {     public static void generateExerciseOfAdditionEquations (){        int m,n,v;        for(int i=0;i<50;i++){            n=generateOperand();            do{                m=generateOperand();                v=m+n;            }while (v >= 100);            System.out.println((i+1)+ "": ""+n+"" + ""+m+"" = ""+v);          }    }    public static int generateOperand(){        Random random = new Random();        return (short)random.nextInt(101);    }    public static void printHeader(){        System.out.println(""------------------------------------"");        System.out.println(""- 程序输出50道100以内的加法运算的口算题 -"");        System.out.println(""------------------------------------"");    }    public static void main(String[] args) {        printHeader();        generateExerciseOfAdditionEquations();    }}运行这个Java程序，可能的输出有（）。",ACD,"50: 99 + 0 = 99
13: 99 + 1 = 100
20: 0 + 29 = 29
45: 6 + 93 = 99
",2
1226062929,根据编码风格，命名标识符的首要原则是要完全准确地表达所代表的事物或动作。,A,"正确
错误
",4
1226062938,在软件构造中，优秀的数据结构决定了软件系统实现的困难程度和系统构造的质量。,A,"错误
正确
",4
1226062939,关于案例设计，总体考虑，把算式用具有3个成员的数组表示是目前算式的最佳数据结构。,B,"正确
错误
",4
1235453383,Java程序中，import能导入包及其所包含的类。,B,"正确
错误
",4
1226062897,在模块化理论中，模块的内聚性和________是两个相互对立且又密切相关的概念。,,耦合性,3
1226062905,依据模块化理论，______是一个模块与系统内其他模块及外部世界的关联程度的度量。,,耦合性,3
1226062908,程序中的每个功能可以由________来验证操作的正确性，它也是软件构造的一项重要活动。,,测试,3
1235525151,在Java中，语句for (int i=0;i<50; i++)执循环的次数是（）。,,50,3
1235691195,"public class BMI {    public String toString(double weight, double height){        double b = weight/(height*height);        if(b < 20)           return ""偏瘦"";        else if(b < 25)           return ""正常"";        else if(b < 30)           return ""偏胖"";        else if(b < 35)           return ""肥胖"";        else if(b < 40)           return ""重度肥胖"";        else           return ""极度肥胖"";    }}输入75.0,1.70，返回结果是（）。 ",,偏胖,3
1226062852,在软件设计中，（）是把问题分解成容易理解、便于控制、便于实现的子问题的一个重要手段，是实现控制复杂性的方式。,D,"面向对象
函数化
结构化
模块化
",1
1226062857,图灵奖获得者 Wirth 提出的（）的方法，可以简化为“算法+数据结构=程序”。,D,"面向对象设计
面向数据流设计
过程化设计
结构化程序设计
",1
1226062867,根据软件的模块化理论，一个函数通过传递开关、标志、名字等控制信息，明显地控制和选择另一函数的功能叫做（）。,D,"标记耦合
外部耦合
内容耦合
控制耦合
",1
1226062874,依据编码风格，代码的（）是区别代码好坏的一个关键特性。,B,"长度
编排
复杂程度
缩进
",1
1226062954,如果用数组存不同的算式作为“习题”，产生80道不同算式的习题时，算式总共最少比较的次数是（）。,A,"3160
2400
800
3200
",1
1235593370,Java程序中，关于static不正确的说法是（）。,A,"static不可以用来修饰类的成员变量
static可以用来修饰类的成员方法
static关键字允许在没有创建对象的情况下来进行调用（方法/变量）
static不可以用来修饰局部变量
",1
1226062884,根据模块化理论，下列属于划分的七级耦合的是（）。,CDE,"内部耦合
直接耦合
内容耦合
非直接耦合
外部耦合
",2
1226062886,ISO为程序质量定义了下列哪几个独立的质量特性（）。,ABCDE,"可用性
可维护性
效率
功能性 
可靠性
",2
1226062889,内部质量属性是在软件设计和编码过程中，通过对中间产品的分析得来的。程序员更关心内部质量，这些属性包括（）。,ABCDE,"可测试性
可维护性
可复用性
可移植性
可扩展性
",2
1235440109,"int add (int m,int n) {    if (m > 100 || m < 0 || n > 100 || n < 0)        return -1;    return m+n;}该程序期望输出两个100以内的正整数之和，和可以超过100。返回-1则表示输入参数不符合要求用边界值分析的方法测试该程序，如果要测试期望的结果，要选择哪些测试数据（）。",BCD,"（90,1）
（1,100）
（99,99）
（1,1）
（1,90）
",2
1235651076,在Java中，语句random.nextInt(5)可能产生的数值有（）。,ABCD,"2
1
3
4
5
",2
1226062919,Meyer提出了4条标准来评价一种设计方法是否定义了有效的模块系统的能力。,A,"错误
正确
",4
1226062949,根据软件测试理论，满足了一个测试覆盖就能为软件的正确程度提供充足的保证。,A,"错误
正确
",4
1226062890,________是把问题分解成容易理解、便于控制、便于实现的子问题的一个重要手段，是实现控制复杂性的方式，软件中的基本手段有函数、类、服务等。,,模块化,3
1235566351,Java程序要使用包中的一个类，是在程序前面使用关键字（）来引入该类。,,import,3
1235621087,"public class BMI {    public String toString(double weight, double height){        double b = weight/(height*height);        if(b < 20)           return ""偏瘦"";        else if(b < 25)           return ""正常"";        else if(b < 30)           return ""偏胖"";        else if(b < 35)           return ""肥胖"";        else if(b < 40)           return ""重度肥胖"";        else           return ""极度肥胖"";    }}输入分别是55.0和1.62，返回结果是（）。",,正常,3
1251341473,"下列Java语句序列执行后，k 的值是_____。int  i=6,j=8,k=10,m=7;  if(i>j||m<k--)  k++;  else  k--; ",,10,3
1226062854,模块具有三大特征：独立性、（）、通用性。,D,"可维护性
可理解性
整洁性
互换性
",1
1226062861,一个函数中各个处理元素都密切相关于同一功能且必须顺序执行，前一功能元素的输出就是下一功能元素的输入，即一个函数完成多个功能，这些函数又必须按序执行是下列哪种内聚（）。,A,"顺序内聚
时间内聚
过程内聚
通信内聚
",1
1235509434,"对案例问题代码2.1可以分解成4个部分。（1）增加一个程序头打印函数void printHeader()，比如简单说明本程序的作用和使用。（2）函数void generateEquations()，产生加法或减法算式的符号串并存入一个数组。（3）输出习题的函数void printExercise()，它接收generateEquations的输出，按照要求打印输出所有的算式。（4）输出习题中每个算式的计算结果void printCalculations()。程序的实现方式有很多，下面的代码给出了主程序及部分模块代码。它定义了两个非局部变量，分别是存放算式符号串的数组和每个算式计算结果的数组。public class BinaryOperation_01 {// 存放算术符号串的数组，非局部变量    static String [] exercises = new String[50];// 存放算术题结果的数组，非局部变量      static short [] results = new short[50];          public static void printHeader(){…… }    public static void generateEquations(){            ……            exercises[i]=""""+m+o+n+""="";            results[i]=v;        }    }    public static void printExercise(){        for (int i=0;i< exercises.length; i++){            System.out.println(""""+(i+1)+"":	""+e[i]);        }    }    public static void printCalculations(){        for (int i=0;i< results.length; i++){            System.out.println(""""+(i+1)+"":	""+r[i]);        }    }    public static void main(String[] args) {        printHeader();        generateEquations();        printExercise();        printCalculations();       }}从模块化设计理论分析，如果函数printExercise()修改为接收一个字符串数组，即printExercise(String[]),那么它和generateEquations()出现在主程序中的耦合性，属于（）。",D,"非直接耦合
数据耦合
 公共耦合
标记耦合
",1
1251319710,下列Java方法定义中，正确的是( )。,A,"int  x( int a,int b) {  return  a-b;  }
 double x( int a,int b) { int w; w=a-b; }
int x( int a,b ) { return (a-b); }
double  x( a,b ) { return  b;  } 
",1
1226062875,模块化是把问题分解成（）的子问题的一个重要手段，是实现控制复杂性的方式。,CDE,"便于测试
足够小
便于实现
容易理解
便于控制
",2
1226062923,根据模块化理论，公共耦合是一组函数都访问同一个公共数据环境。,B,"错误
正确
",4
1226062925,根据IEEE标准的定义，测试用例是多组输入、运行条件和通过/失败准则。,A,"错误
正确
",4
1226062893,________是计算机存储、组织数据的方式，是指相互之间存在一种或多种特定关系的数据元素的集合。,,数据结构,3
1226062894,根据模块的内聚性定义，________内聚把几种相关的功能或数据组合在一起，每次被调用时，由传送函数参数来确定该函数应完成哪种功能。,,逻辑,3
1226062904,依据模块化理论，_______是对一个模块内部各个组成元素之间相互结合的紧密程度的度量指标。,,内聚,3
1226062906,根据模块化理论，若一组函数通过参数表传递记录信息，这组函数模块之间的耦合就是_____耦合。,,标记,3
1226062862,根据软件的模块化理论，下列耦合度最低的是（）。,A,"非直接耦合
控制耦合
外部耦合
数据耦合
",1
1226062866,根据软件的模块化理论，下列耦合度由强到弱排序正确的是（）。,C,"标记耦合 控制耦合 外部耦合 公共耦合
内部耦合 外部耦合 非直接耦合 直接耦合
内容耦合 外部耦合 控制耦合 非直接耦合
外部耦合 内部耦合 直接耦合 非直接耦合
",1
1226062869,一个函数直接修改另一个函数的数据，或直接转入另一个函数，或者一个函数有多个入口叫做（）。,B,"公共耦合
内容耦合
非直接耦合
外部耦合
",1
1226062872,可维护可以细化为5个子特性，它们是（）、易改变性、稳定性、易测试性、维护性的依从性。,C,"易读性 
可理解性 
易分析性
标准性
",1
1226062953,"如果用数组存不同的算式作为“习题”，产生60道不同算式的习题时,算式总共最少比较的次数是（）。",D,"1200
120
60
1770
",1
1226062962,根据模块化理论，理想的内聚性要求模块的功能应明确、（）。,C,"清晰
高级
单一
全面
",1
1235334485,"对案例问题代码2.1可以分解成4个部分。（1）增加一个程序头打印函数void printHeader()，比如简单说明本程序的作用和使用。（2）函数void generateEquations()，产生加法或减法算式的符号串并存入一个数组。（3）输出习题的函数void printExercise()，它接收generateEquations的输出，按照要求打印输出所有的算式。（4）输出习题中每个算式的计算结果void printCalculations()。程序的实现方式有很多，下面的代码给出了主程序及部分模块代码。它定义了两个非局部变量，分别是存放算式符号串的数组和每个算式计算结果的数组。public class BinaryOperation_01 {// 存放算术符号串的数组，非局部变量    static String [] exercises = new String[50];// 存放算术题结果的数组，非局部变量      static short [] results = new short[50];          public static void printHeader(){…… }    public static void generateEquations(){            ……            exercises[i]=""""+m+o+n+""="";            results[i]=v;        }    }    public static void printExercise(){        for (int i=0;i< exercises.length; i++){            System.out.println(""""+(i+1)+"":	""+e[i]);        }    }    public static void printCalculations(){        for (int i=0;i< results.length; i++){            System.out.println(""""+(i+1)+"":	""+r[i]);        }    }    public static void main(String[] args) {        printHeader();        generateEquations();        printExercise();        printCalculations();       }}从模块化设计理论分析，函数printHeader()和generateEquations()出现在主程序中的耦合性，属于（）。",D,"控制耦合
标记耦合
数据耦合
非直接耦合
",1
1226062888,软件质量是许多质量属性的综合体现，各种质量属性反映了软件质量的不同方面。从认识和评估的角度，软件质量分为（）。,BD,"用户体验质量属性
内部质量属性
功能质量属性
外部质量属性
代码质量属性
",2
1235620046,"import java.util.Random;public class ExerciseGenerator_t1_1 {     public static void generateExerciseOfAdditionEquations (){        int m,n,v;        for(int i=0;i<50;i++){            n=generateOperand();            do{                m=generateOperand();                v=m+n;            }while (v >= 100);            System.out.println((i+1)+ "": ""+n+"" + ""+m+"" = ""+v);          }    }    public static int generateOperand(){        Random random = new Random();        return (short)random.nextInt(101);    }    public static void printHeader(){        System.out.println(""------------------------------------"");        System.out.println(""- 程序输出50道100以内的加法运算的口算题 -"");        System.out.println(""------------------------------------"");    }    public static void main(String[] args) {        printHeader();        generateExerciseOfAdditionEquations();    }}运行这个Java程序，函数int generateOperand()返回的数值可能是（）。",ABCDE,"99
100
1
19
0
",2
1235497577,Java语言的类的名称不能以小写字母开头。,A,"错误
正确
",4
1226062898,在程序设计中，如果每次分解得到的更小的问题结构及其解答方式相似，就可以用________（函数）来解决问题。,,递归,3
1226062863,根据模块化理论，下列耦合度最强的是（）。,C,"数据耦合
公共耦合
内容耦合
外部耦合
",1
1226062956,在软件测试中，测试用例是一组输入、（）和通过/失败准则。,C,"测试步骤
测试数据
运行条件
运行结果
",1
1235397339,"int add (int m,int n) {    if (m > 100 || m < 0 || n > 100 || n < 0)        return -1;    return m+n;}该程序期望输出两个100以内的自然数之和，和可以超过100。返回-1则表示输入参数不符合要求，不是期望的结果。这个程序有两个输入参数。测试该程序的一个策略是，让其中的一个参数的值保持不变（比如让n=10），采用等价类与边界值分析专注测试参数m；然后再让m的值不变、专注测试n对程序的影响。假设取n=10，用等价类与边界值分析方法测试程序的期望结果和不期望结果，把m的值按照1~9，10~19、…，90~99划分成有效等价区间，最经济的测试数据是多少个？",C,"13
10
12
11
",1
1226062883,根据模块化理论，下列内聚由强到弱排序正确的是（）。,ABCD,"功能内聚 时间内聚 偶然内聚
顺序内聚 过程内聚 逻辑内聚
通信内聚 过程内聚 时间内聚
功能内聚 顺序内聚 时间内聚
过程内聚 时间内聚 顺序内聚
",2
1235531950,把“算式”设计成一个具有数据结构的量时，我们有几种选择，每种设计都有一些优势和劣势，比如C的结构体或类表示一个“算式”时，具有如下优势。,ABCE,"代码可读性高
节省存储空间
较易修改
直接显示输出
易编程实现
",2
1235597016,"import java.util.Random;public class BinaryOperation_02 {         public static void main(String[] args) {        short m=0, n=0,v=0, ov=0;                  char o='+';            Random random = new Random();        for (int i=0;i<50; i++){            ov = (short) random.nextInt(2);       // 随机产生运算符            m = (short)random.nextInt(101);       // 随机产生运算数            if (ov == 1){                do {                   n = (short)random.nextInt(101);                   v = (short) (m + n);                } while (100 < v || v < 0);                           o = '+';            } else {                                   do {                   n = (short)random.nextInt(101);                   v = (short) (m - n);                } while (100 < v || v < 0);                o = '-';            }                       System.out.println(""""+(i+1)+"":	""+m+o+n+""="");        }    }}程序运行，语句“System.out.println(""""+(i+1)+"":	""+m+o+n+""="");”可能输出（）。",BCD,"51: 41+52=  
32: 10+40=  
21: 86-15=  
50: 100+0=  
13+31= 
",2
1226062859,根据软件的模块化理论，下列四种内聚，由弱到强排序正确的是（）。,C,"偶然内聚 逻辑内聚 过程内聚 时间内聚
逻辑内聚 偶然内聚 时间内聚 过程内聚
偶然内聚 逻辑内聚 时间内聚 过程内聚
逻辑内聚 偶然内聚 过程内聚 时间内聚
",1
1226062880,Meyer提出了下列哪几条标准来评价一种设计方法是否定义了有效的模块系统的能力。,ABCDE,"模块连续性
模块可组装性
模块可分解性
模块保护性
模块可理解性
",2
1226062918,对于一个实际应用问题，需要采用模块化技术，分解大的数据、分解大的操作，使用若干数据结构、若干算法来完成整个程序的功能。,B,"错误
正确
",4
1235523924,public class ThisTester {     static int value = 2020;     public static void main(String[] args) throws Exception{        new ThisTester().printValue();     }      private void printValue(){        int value = 20;        System.out.println(this.value);     }}代码运行的结果是()。,,2020,3
1226062877,根据模块化理论，模块具有三大特征，包括（）。,BCD,"可理解性
独立性
互换性
通用性
可移植性
",2
1235617967,"import java.util.Random;public class BinaryOperation_02 {         public static void main(String[] args) {        short m=0, n=0,v=0, ov=0;                  char o='+';            Random random = new Random();        for (int i=0;i<50; i++){            ov = (short) random.nextInt(2);       // 随机产生运算符            m = (short)random.nextInt(101);       // 随机产生运算数            if (ov == 1){                do {                   n = (short)random.nextInt(101);                   v = (short) (m + n);                } while (100 < v || v < 0);                           o = '+';            } else {                                   do {                   n = (short)random.nextInt(101);                   v = (short) (m - n);                } while (100 < v || v < 0);                o = '-';            }                       System.out.println(""""+(i+1)+"":	""+m+o+n+""="");        }    }}其中语句“do {…} while (100 < v || v < 0);”循环的次数不能确定。",A,"正确
错误
",4
1235505341,"int add (int m,int n) {    if (m > 100 || m < 0 || n > 100 || n < 0)        return -1;    return m+n;}该程序期望输出两个100以内的正整数之和，和可以超过100。返回-1则表示输入参数不符合要求。这个程序有两个输入参数。测试该程序的一个策略是，让其中的一个参数的值保持不变（比如让n=10），采用等价类与边界值分析专注测试参数m；然后再让m的值不变、专注测试n对程序的影响。取n=10，用等价类与边界值分析方法测试程序的期望结果和不期望结果，把m的值按照1~9，10~19、…，90~99划分成有效等价区间，最经济的测试数据是多少个？",,12,3
1235550664,"public class BMI {    public String toString(double weight, double height){        double b = weight/(height*height);        if(b < 20)           return ""偏瘦"";        else if(b < 25)           return ""正常"";        else if(b < 30)           return ""偏胖"";        else if(b < 35)           return ""肥胖"";        else if(b < 40)           return ""重度肥胖"";        else           return ""极度肥胖"";    }}输入55.0,1.75，返回结果是（）。 ",,偏瘦,3
1226062864,根据模块化理论，一组函数都访问同一（）而不是同一（），而且不是通过参数传递该全局变量的信息叫做外部耦合。,A,"全局简单变量 全局数据结构
全局数据结构 公共数据环境
公共数据环境 全局简单变量
全局数据结构 全局简单变量
",1
1226062887,根据软件质量，软件的可维护可以细化为那些子特性（）。,ABCDE,"易分析性
易改变性
易测试性
稳定性
维护性的依从性
",2
1226062921,在模块化理论中，通信内聚指一个函数中各个处理元素都密切相关于同一功能且必须顺序执行。,A,"错误
正确
",4
1226062891,软件______是指具有相对独立的、由数据说明、执行语句等程序对象构成的代码集合。,,模块,3
1226062913,依据软件构造技术，关注点聚合是面向方面的程序设计的核心概念。,A,"正确
错误
",4
1226062895,根据模块的耦合性定义，_______耦合是两函数之间没有直接关系，之间的联系完全是通过其他函数的控制和调用来实现的。,,非直接,3
1226062920,在模块化理论中，内聚性是对一个模块内部各个组成元素之间相互结合的紧密程度的度量指标。,B,"错误
正确
",4
1226062903,模块的独立程度可以由两个定性标准来度量，它们是内聚和_______。,,耦合,3
1251416031,下列Java方法定义中，正确的是( )。‍,D,"void x ( int a,int b ); { return (a-b); }
double x {  return  b;  }
x ( int a,int b) { return a-b; }
int x ( int a,int b) { return a+b; }
",1
1235426615,"import java.util.Random;public class BinaryOperation_02 {         public static void main(String[] args) {        short m=0, n=0,v=0, ov=0;                  char o='+';            Random random = new Random();        for (int i=0;i<50; i++){            ov = (short) random.nextInt(2);       // 随机产生运算符            m = (short)random.nextInt(101);       // 随机产生运算数            if (ov == 1){                do {                   n = (short)random.nextInt(101);                   v = (short) (m + n);                } while (100 < v || v < 0);                           o = '+';            } else {                                   do {                   n = (short)random.nextInt(101);                   v = (short) (m - n);                } while (100 < v || v < 0);                o = '-';            }                       System.out.println(""""+(i+1)+"":	""+m+o+n+""="");        }    }}关于语句“do {…} while (100 < v || v < 0);”，正确的说法是（）。",D,"循环的次数是在0到100的范围。
循环的次数都是固定值。
上述说法都不正确。
循环的次数都不能确定。
",1
